package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwareXenonCommonTaskState com vmware xenon common task state
// swagger:model com:vmware:xenon:common:TaskState
type ComVmwareXenonCommonTaskState struct {

	// duration micros
	DurationMicros int64 `json:"durationMicros,omitempty"`

	// failure
	Failure *ComVmwareXenonCommonServiceErrorResponse `json:"failure,omitempty"`

	// is direct
	IsDirect bool `json:"isDirect,omitempty"`

	// stage
	Stage string `json:"stage,omitempty"`
}

// Validate validates this com vmware xenon common task state
func (m *ComVmwareXenonCommonTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailure(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwareXenonCommonTaskState) validateFailure(formats strfmt.Registry) error {

	if swag.IsZero(m.Failure) { // not required
		return nil
	}

	if m.Failure != nil {

		if err := m.Failure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failure")
			}
			return err
		}
	}

	return nil
}

var comVmwareXenonCommonTaskStateTypeStagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATED","STARTED","FINISHED","FAILED","CANCELLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareXenonCommonTaskStateTypeStagePropEnum = append(comVmwareXenonCommonTaskStateTypeStagePropEnum, v)
	}
}

const (
	// ComVmwareXenonCommonTaskStateStageCREATED captures enum value "CREATED"
	ComVmwareXenonCommonTaskStateStageCREATED string = "CREATED"
	// ComVmwareXenonCommonTaskStateStageSTARTED captures enum value "STARTED"
	ComVmwareXenonCommonTaskStateStageSTARTED string = "STARTED"
	// ComVmwareXenonCommonTaskStateStageFINISHED captures enum value "FINISHED"
	ComVmwareXenonCommonTaskStateStageFINISHED string = "FINISHED"
	// ComVmwareXenonCommonTaskStateStageFAILED captures enum value "FAILED"
	ComVmwareXenonCommonTaskStateStageFAILED string = "FAILED"
	// ComVmwareXenonCommonTaskStateStageCANCELLED captures enum value "CANCELLED"
	ComVmwareXenonCommonTaskStateStageCANCELLED string = "CANCELLED"
)

// prop value enum
func (m *ComVmwareXenonCommonTaskState) validateStageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareXenonCommonTaskStateTypeStagePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareXenonCommonTaskState) validateStage(formats strfmt.Registry) error {

	if swag.IsZero(m.Stage) { // not required
		return nil
	}

	// value enum
	if err := m.validateStageEnum("stage", "body", m.Stage); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareXenonCommonTaskState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareXenonCommonTaskState) UnmarshalBinary(b []byte) error {
	var res ComVmwareXenonCommonTaskState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
