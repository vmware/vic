package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription com vmware photon controller model resources compute description service compute description
// swagger:model com:vmware:photon:controller:model:resources:ComputeDescriptionService:ComputeDescription
type ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription struct {

	// auth credentials link
	AuthCredentialsLink string `json:"authCredentialsLink,omitempty"`

	// boot adapter reference
	BootAdapterReference strfmt.URI `json:"bootAdapterReference,omitempty"`

	// constraints
	Constraints map[string]string `json:"constraints,omitempty"`

	// cost per minute
	CostPerMinute float64 `json:"costPerMinute,omitempty"`

	// cpu count
	CPUCount int64 `json:"cpuCount,omitempty"`

	// cpu mhz per core
	CPUMhzPerCore int64 `json:"cpuMhzPerCore,omitempty"`

	// creation time micros
	CreationTimeMicros int64 `json:"creationTimeMicros,omitempty"`

	// currency unit
	CurrencyUnit string `json:"currencyUnit,omitempty"`

	// custom properties
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// data store Id
	DataStoreID string `json:"dataStoreId,omitempty"`

	// desc
	Desc string `json:"desc,omitempty"`

	// disk desc links
	DiskDescLinks []string `json:"diskDescLinks"`

	// endpoint link
	EndpointLink string `json:"endpointLink,omitempty"`

	// enumeration adapter reference
	EnumerationAdapterReference strfmt.URI `json:"enumerationAdapterReference,omitempty"`

	// environment name
	EnvironmentName string `json:"environmentName,omitempty"`

	// gpu count
	GpuCount int64 `json:"gpuCount,omitempty"`

	// group links
	GroupLinks []string `json:"groupLinks"`

	// health adapter reference
	HealthAdapterReference strfmt.URI `json:"healthAdapterReference,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// instance adapter reference
	InstanceAdapterReference strfmt.URI `json:"instanceAdapterReference,omitempty"`

	// instance type
	InstanceType string `json:"instanceType,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// network interface desc links
	NetworkInterfaceDescLinks []string `json:"networkInterfaceDescLinks"`

	// power adapter reference
	PowerAdapterReference strfmt.URI `json:"powerAdapterReference,omitempty"`

	// power state
	PowerState string `json:"powerState,omitempty"`

	// region Id
	RegionID string `json:"regionId,omitempty"`

	// stats adapter reference
	StatsAdapterReference strfmt.URI `json:"statsAdapterReference,omitempty"`

	// Set of URIs for stats adapters of this host
	StatsAdapterReferences []strfmt.URI `json:"statsAdapterReferences"`

	// supported children
	SupportedChildren []string `json:"supportedChildren"`

	// tag links
	TagLinks []string `json:"tagLinks"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`

	// total memory bytes
	TotalMemoryBytes int64 `json:"totalMemoryBytes,omitempty"`

	// zone Id
	ZoneID string `json:"zoneId,omitempty"`
}

// Validate validates this com vmware photon controller model resources compute description service compute description
func (m *ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskDescLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkInterfaceDescLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePowerState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatsAdapterReferences(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSupportedChildren(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTagLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription) validateDiskDescLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.DiskDescLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription) validateGroupLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription) validateNetworkInterfaceDescLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkInterfaceDescLinks) { // not required
		return nil
	}

	return nil
}

var comVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescriptionTypePowerStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ON","OFF","UNKNOWN","SUSPEND"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescriptionTypePowerStatePropEnum = append(comVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescriptionTypePowerStatePropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescriptionPowerStateON captures enum value "ON"
	ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescriptionPowerStateON string = "ON"
	// ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescriptionPowerStateOFF captures enum value "OFF"
	ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescriptionPowerStateOFF string = "OFF"
	// ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescriptionPowerStateUNKNOWN captures enum value "UNKNOWN"
	ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescriptionPowerStateUNKNOWN string = "UNKNOWN"
	// ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescriptionPowerStateSUSPEND captures enum value "SUSPEND"
	ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescriptionPowerStateSUSPEND string = "SUSPEND"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription) validatePowerStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescriptionTypePowerStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription) validatePowerState(formats strfmt.Registry) error {

	if swag.IsZero(m.PowerState) { // not required
		return nil
	}

	// value enum
	if err := m.validatePowerStateEnum("powerState", "body", m.PowerState); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription) validateStatsAdapterReferences(formats strfmt.Registry) error {

	if swag.IsZero(m.StatsAdapterReferences) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription) validateSupportedChildren(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedChildren) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription) validateTagLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TagLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelResourcesComputeDescriptionServiceComputeDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
