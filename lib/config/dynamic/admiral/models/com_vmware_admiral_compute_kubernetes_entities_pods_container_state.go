package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerState com vmware admiral compute kubernetes entities pods container state
// swagger:model com:vmware:admiral:compute:kubernetes:entities:pods:ContainerState
type ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerState struct {

	// running
	Running *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerStateRunning `json:"running,omitempty"`

	// terminated
	Terminated *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerStateTerminated `json:"terminated,omitempty"`

	// waiting
	Waiting *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerStateWaiting `json:"waiting,omitempty"`
}

// Validate validates this com vmware admiral compute kubernetes entities pods container state
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRunning(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTerminated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWaiting(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerState) validateRunning(formats strfmt.Registry) error {

	if swag.IsZero(m.Running) { // not required
		return nil
	}

	if m.Running != nil {

		if err := m.Running.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("running")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerState) validateTerminated(formats strfmt.Registry) error {

	if swag.IsZero(m.Terminated) { // not required
		return nil
	}

	if m.Terminated != nil {

		if err := m.Terminated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terminated")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerState) validateWaiting(formats strfmt.Registry) error {

	if swag.IsZero(m.Waiting) { // not required
		return nil
	}

	if m.Waiting != nil {

		if err := m.Waiting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("waiting")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerState) UnmarshalBinary(b []byte) error {
	var res ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
