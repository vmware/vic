package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState com vmware photon controller model tasks provision subnet task service provision subnet task state
// swagger:model com:vmware:photon:controller:model:tasks:ProvisionSubnetTaskService:ProvisionSubnetTaskState
type ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState struct {

	// failure message
	FailureMessage string `json:"failureMessage,omitempty"`

	// options
	Options []string `json:"options"`

	// request type
	RequestType string `json:"requestType,omitempty"`

	// service task callback
	ServiceTaskCallback *ComVmwarePhotonControllerModelTasksServiceTaskCallback `json:"serviceTaskCallback,omitempty"`

	// subnet description link
	SubnetDescriptionLink string `json:"subnetDescriptionLink,omitempty"`

	// subnet link
	SubnetLink string `json:"subnetLink,omitempty"`

	// task info
	TaskInfo *ComVmwareXenonCommonTaskState `json:"taskInfo,omitempty"`

	// task sub stage
	TaskSubStage string `json:"taskSubStage,omitempty"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`
}

// Validate validates this com vmware photon controller model tasks provision subnet task service provision subnet task state
func (m *ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRequestType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceTaskCallback(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskSubStage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var comVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateOptionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DOCUMENT_CHANGES_ONLY","VALIDATE_ONLY","IS_MOCK","PRESERVE_MISSING_RESOUCES","SELF_DELETE_ON_COMPLETION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateOptionsItemsEnum = append(comVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateOptionsItemsEnum, v)
	}
}

func (m *ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState) validateOptionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateOptionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {

		// value enum
		if err := m.validateOptionsItemsEnum("options"+"."+strconv.Itoa(i), "body", m.Options[i]); err != nil {
			return err
		}

	}

	return nil
}

var comVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTypeRequestTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATE","DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTypeRequestTypePropEnum = append(comVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTypeRequestTypePropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateRequestTypeCREATE captures enum value "CREATE"
	ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateRequestTypeCREATE string = "CREATE"
	// ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateRequestTypeDELETE captures enum value "DELETE"
	ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateRequestTypeDELETE string = "DELETE"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState) validateRequestTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTypeRequestTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState) validateRequestType(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestTypeEnum("requestType", "body", m.RequestType); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState) validateServiceTaskCallback(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceTaskCallback) { // not required
		return nil
	}

	if m.ServiceTaskCallback != nil {

		if err := m.ServiceTaskCallback.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceTaskCallback")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState) validateTaskInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskInfo) { // not required
		return nil
	}

	if m.TaskInfo != nil {

		if err := m.TaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskInfo")
			}
			return err
		}
	}

	return nil
}

var comVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTypeTaskSubStagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATED","PROVISIONING_SUBNET","REMOVING_SUBNET","FINISHED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTypeTaskSubStagePropEnum = append(comVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTypeTaskSubStagePropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTaskSubStageCREATED captures enum value "CREATED"
	ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTaskSubStageCREATED string = "CREATED"
	// ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTaskSubStagePROVISIONINGSUBNET captures enum value "PROVISIONING_SUBNET"
	ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTaskSubStagePROVISIONINGSUBNET string = "PROVISIONING_SUBNET"
	// ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTaskSubStageREMOVINGSUBNET captures enum value "REMOVING_SUBNET"
	ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTaskSubStageREMOVINGSUBNET string = "REMOVING_SUBNET"
	// ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTaskSubStageFINISHED captures enum value "FINISHED"
	ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTaskSubStageFINISHED string = "FINISHED"
	// ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTaskSubStageFAILED captures enum value "FAILED"
	ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTaskSubStageFAILED string = "FAILED"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState) validateTaskSubStageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskStateTypeTaskSubStagePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState) validateTaskSubStage(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskSubStage) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaskSubStageEnum("taskSubStage", "body", m.TaskSubStage); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelTasksProvisionSubnetTaskServiceProvisionSubnetTaskState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
