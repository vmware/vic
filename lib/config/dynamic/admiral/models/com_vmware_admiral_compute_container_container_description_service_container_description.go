package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription com vmware admiral compute container container description service container description
// swagger:model com:vmware:admiral:compute:container:ContainerDescriptionService:ContainerDescription
type ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription struct {

	// The number of nodes to be provisioned. Default is one.
	Cluster int64 `json:"_cluster,omitempty"`

	//  Affinity or anti-affinity conditions of containers deployed or not deployed on the same host. Format: [!]serviceName[:soft|hard].If not specified, the default constraint type is 'hard'. Examples: ['cont1', '!cont2', 'cont3:soft', 'cont4:hard', '!cont5:soft', '!cont6:hard']
	Affinity []string `json:"affinity"`

	// A list of kernel capabilities to add to the container.
	CapAdd []string `json:"capAdd"`

	// A list of kernel capabilities to add to the container.
	CapDrop []string `json:"capDrop"`

	// Commands to run.
	Command []string `json:"command"`

	// CPU Shares for container.
	CPUShares int64 `json:"cpuShares,omitempty"`

	// creation time micros
	CreationTimeMicros int64 `json:"creationTimeMicros,omitempty"`

	// custom properties
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// A list of services (in a blueprint) the container depends on.
	DependsOn []string `json:"dependsOn"`

	// Document link to the deployment policy if any. Container description with a deployment policy will be deployed on hosts/policies with the same policy.
	DeploymentPolicyID string `json:"deploymentPolicyId,omitempty"`

	// desc
	Desc string `json:"desc,omitempty"`

	// A list of devices to add to the container specified in the format hostPath:containerPath:rwm
	Device []string `json:"device"`

	// Force Docker to use specific DNS servers.
	DNS []string `json:"dns"`

	// Custom DNS search domains (Use . if you don't wish to set the search domain).
	DNSSearch []string `json:"dnsSearch"`

	// Domain name of the container.
	DomainName string `json:"domainName,omitempty"`

	// Set the entrypoints for the container.
	EntryPoint []string `json:"entryPoint"`

	// A list of environment variables in the form of VAR=value.
	Env []string `json:"env"`

	// Add a custom host-to-IP mapping (host:ip).
	ExtraHosts []string `json:"extraHosts"`

	// group links
	GroupLinks []string `json:"groupLinks"`

	// Health service for this container.
	HealthConfig *ComVmwareAdmiralComputeContainerHealthCheckerHealthConfig `json:"healthConfig,omitempty"`

	// Hostname of the container.
	Hostname string `json:"hostname,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// The docker image.
	Image string `json:"image,omitempty"`

	// An image reference to a docker image in .tgz format to be downloaded to the server and pushed to the local host repository.
	ImageReference strfmt.URI `json:"imageReference,omitempty"`

	// Instance Adapter reference for provisioning of containers.
	InstanceAdapterReference strfmt.URI `json:"instanceAdapterReference,omitempty"`

	// A list of services (in a blueprint) the container depends on.
	Links []string `json:"links"`

	// Log configuration of the container
	LogConfig *ComVmwareAdmiralComputeContainerLogConfig `json:"logConfig,omitempty"`

	// When restart policy is set to on-failure, the max retries.
	MaximumRetryCount int64 `json:"maximumRetryCount,omitempty"`

	// Memory limit in bytes.
	MemoryLimit int64 `json:"memoryLimit,omitempty"`

	// Total memory usage (memory + swap); set -1 to set infinite (disable swap limit), 0 to disable swap.
	MemorySwapLimit int64 `json:"memorySwapLimit,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Network mode for the container (bridge / none / container:<name|id> / host).
	NetworkMode string `json:"networkMode,omitempty"`

	// Networks to join, referencing declared or already existing networks.
	Networks map[string]string `json:"networks,omitempty"`

	// Link to the parent container description.
	ParentDescriptionLink string `json:"parentDescriptionLink,omitempty"`

	// PID namespace for the container ( '' / host )
	PidMode string `json:"pidMode,omitempty"`

	// The identity of a grouping associated usually with a host for multiple containers.
	Pod string `json:"pod,omitempty"`

	// Port bindings in the format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort where range of ports can also be provided.
	PortBindings []*ComVmwareAdmiralComputeContainerPortBinding `json:"portBindings"`

	// Run in privileged mode
	Privileged bool `json:"privileged,omitempty"`

	// Automatically bind all exposed ports declared for the image.
	PublishAll bool `json:"publishAll,omitempty"`

	// region Id
	RegionID string `json:"regionId,omitempty"`

	// Restart policy to apply when a container exits (no, on-failure[:max-retry], always).
	RestartPolicy string `json:"restartPolicy,omitempty"`

	// tag links
	TagLinks []string `json:"tagLinks"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`

	// A list of resource limits to set in the container
	Ulimits []*ComVmwareAdmiralComputeContainerUlimit `json:"ulimits"`

	// User to use inside the container.
	User string `json:"user,omitempty"`

	// Specify volume driver name (default "local")
	VolumeDriver string `json:"volumeDriver,omitempty"`

	// Mount a volume e.g /host:/container or /host:/container:ro
	Volumes []string `json:"volumes"`

	// Mount volumes from the specified container(s) of the format <container name>[:<ro|rw>]
	VolumesFrom []string `json:"volumesFrom"`

	// Working dir for commands to run in.
	WorkingDir string `json:"workingDir,omitempty"`

	// Data-center or other identification of the group of resources.
	ZoneID string `json:"zoneId,omitempty"`
}

// Validate validates this com vmware admiral compute container container description service container description
func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffinity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCapAdd(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCapDrop(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommand(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDependsOn(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDNS(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDNSSearch(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntryPoint(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnv(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExtraHosts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHealthConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLogConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePortBindings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTagLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUlimits(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumesFrom(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateAffinity(formats strfmt.Registry) error {

	if swag.IsZero(m.Affinity) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateCapAdd(formats strfmt.Registry) error {

	if swag.IsZero(m.CapAdd) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateCapDrop(formats strfmt.Registry) error {

	if swag.IsZero(m.CapDrop) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateCommand(formats strfmt.Registry) error {

	if swag.IsZero(m.Command) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateDependsOn(formats strfmt.Registry) error {

	if swag.IsZero(m.DependsOn) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateDNS(formats strfmt.Registry) error {

	if swag.IsZero(m.DNS) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateDNSSearch(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSSearch) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateEntryPoint(formats strfmt.Registry) error {

	if swag.IsZero(m.EntryPoint) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateEnv(formats strfmt.Registry) error {

	if swag.IsZero(m.Env) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateExtraHosts(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtraHosts) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateGroupLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateHealthConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.HealthConfig) { // not required
		return nil
	}

	if m.HealthConfig != nil {

		if err := m.HealthConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateLogConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.LogConfig) { // not required
		return nil
	}

	if m.LogConfig != nil {

		if err := m.LogConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validatePortBindings(formats strfmt.Registry) error {

	if swag.IsZero(m.PortBindings) { // not required
		return nil
	}

	for i := 0; i < len(m.PortBindings); i++ {

		if swag.IsZero(m.PortBindings[i]) { // not required
			continue
		}

		if m.PortBindings[i] != nil {

			if err := m.PortBindings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("portBindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateTagLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TagLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateUlimits(formats strfmt.Registry) error {

	if swag.IsZero(m.Ulimits) { // not required
		return nil
	}

	for i := 0; i < len(m.Ulimits); i++ {

		if swag.IsZero(m.Ulimits[i]) { // not required
			continue
		}

		if m.Ulimits[i] != nil {

			if err := m.Ulimits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ulimits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) validateVolumesFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumesFrom) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription) UnmarshalBinary(b []byte) error {
	var res ComVmwareAdmiralComputeContainerContainerDescriptionServiceContainerDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
