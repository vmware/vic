package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ComVmwarePhotonControllerModelTasksSSHCommandTaskServiceSSHCommandTaskState com vmware photon controller model tasks Ssh command task service Ssh command task state
// swagger:model com:vmware:photon:controller:model:tasks:SshCommandTaskService:SshCommandTaskState
type ComVmwarePhotonControllerModelTasksSSHCommandTaskServiceSSHCommandTaskState struct {

	// auth credential link
	AuthCredentialLink string `json:"authCredentialLink,omitempty"`

	// command response
	CommandResponse map[string]string `json:"commandResponse,omitempty"`

	// commands
	Commands []string `json:"commands"`

	// failure message
	FailureMessage string `json:"failureMessage,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// is mock request
	IsMockRequest bool `json:"isMockRequest,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// task info
	TaskInfo *ComVmwareXenonCommonTaskState `json:"taskInfo,omitempty"`
}

// Validate validates this com vmware photon controller model tasks Ssh command task service Ssh command task state
func (m *ComVmwarePhotonControllerModelTasksSSHCommandTaskServiceSSHCommandTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommands(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelTasksSSHCommandTaskServiceSSHCommandTaskState) validateCommands(formats strfmt.Registry) error {

	if swag.IsZero(m.Commands) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksSSHCommandTaskServiceSSHCommandTaskState) validateTaskInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskInfo) { // not required
		return nil
	}

	if m.TaskInfo != nil {

		if err := m.TaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksSSHCommandTaskServiceSSHCommandTaskState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksSSHCommandTaskServiceSSHCommandTaskState) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelTasksSSHCommandTaskServiceSSHCommandTaskState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
