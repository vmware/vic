package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRule com vmware photon controller model resources security group service security group state rule
// swagger:model com:vmware:photon:controller:model:resources:SecurityGroupService:SecurityGroupState:Rule
type ComVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRule struct {

	// access
	Access string `json:"access,omitempty"`

	// ip range cidr
	IPRangeCidr string `json:"ipRangeCidr,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ports
	Ports string `json:"ports,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this com vmware photon controller model resources security group service security group state rule
func (m *ComVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var comVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRuleTypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allow","Deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRuleTypeAccessPropEnum = append(comVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRuleTypeAccessPropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRuleAccessAllow captures enum value "Allow"
	ComVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRuleAccessAllow string = "Allow"
	// ComVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRuleAccessDeny captures enum value "Deny"
	ComVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRuleAccessDeny string = "Deny"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRule) validateAccessEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRuleTypeAccessPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRule) validateAccess(formats strfmt.Registry) error {

	if swag.IsZero(m.Access) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessEnum("access", "body", m.Access); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRule) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelResourcesSecurityGroupServiceSecurityGroupStateRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
