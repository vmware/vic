package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwareAdmiralComputeContainerHealthCheckerHealthConfig com vmware admiral compute container health checker health config
// swagger:model com:vmware:admiral:compute:container:HealthChecker:HealthConfig
type ComVmwareAdmiralComputeContainerHealthCheckerHealthConfig struct {

	// Automatic redeployment of containers.
	Autoredeploy bool `json:"autoredeploy,omitempty"`

	// command
	Command string `json:"command,omitempty"`

	// healthy threshold
	HealthyThreshold int64 `json:"healthyThreshold,omitempty"`

	// http method
	HTTPMethod string `json:"httpMethod,omitempty"`

	// http version
	HTTPVersion string `json:"httpVersion,omitempty"`

	// Ignore health check on provision. Default is true.
	IgnoreOnProvision bool `json:"ignoreOnProvision,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// timeout millis
	TimeoutMillis int64 `json:"timeoutMillis,omitempty"`

	// unhealthy threshold
	UnhealthyThreshold int64 `json:"unhealthyThreshold,omitempty"`

	// url path
	URLPath string `json:"urlPath,omitempty"`
}

// Validate validates this com vmware admiral compute container health checker health config
func (m *ComVmwareAdmiralComputeContainerHealthCheckerHealthConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTTPMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHTTPVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var comVmwareAdmiralComputeContainerHealthCheckerHealthConfigTypeHTTPMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GET","POST","PATCH","PUT","DELETE","OPTIONS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareAdmiralComputeContainerHealthCheckerHealthConfigTypeHTTPMethodPropEnum = append(comVmwareAdmiralComputeContainerHealthCheckerHealthConfigTypeHTTPMethodPropEnum, v)
	}
}

const (
	// ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPMethodGET captures enum value "GET"
	ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPMethodGET string = "GET"
	// ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPMethodPOST captures enum value "POST"
	ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPMethodPOST string = "POST"
	// ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPMethodPATCH captures enum value "PATCH"
	ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPMethodPATCH string = "PATCH"
	// ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPMethodPUT captures enum value "PUT"
	ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPMethodPUT string = "PUT"
	// ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPMethodDELETE captures enum value "DELETE"
	ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPMethodDELETE string = "DELETE"
	// ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPMethodOPTIONS captures enum value "OPTIONS"
	ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPMethodOPTIONS string = "OPTIONS"
)

// prop value enum
func (m *ComVmwareAdmiralComputeContainerHealthCheckerHealthConfig) validateHTTPMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareAdmiralComputeContainerHealthCheckerHealthConfigTypeHTTPMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareAdmiralComputeContainerHealthCheckerHealthConfig) validateHTTPMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateHTTPMethodEnum("httpMethod", "body", m.HTTPMethod); err != nil {
		return err
	}

	return nil
}

var comVmwareAdmiralComputeContainerHealthCheckerHealthConfigTypeHTTPVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HTTP_v1_1","HTTP_v2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareAdmiralComputeContainerHealthCheckerHealthConfigTypeHTTPVersionPropEnum = append(comVmwareAdmiralComputeContainerHealthCheckerHealthConfigTypeHTTPVersionPropEnum, v)
	}
}

const (
	// ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPVersionHTTPV11 captures enum value "HTTP_v1_1"
	ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPVersionHTTPV11 string = "HTTP_v1_1"
	// ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPVersionHTTPV2 captures enum value "HTTP_v2"
	ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigHTTPVersionHTTPV2 string = "HTTP_v2"
)

// prop value enum
func (m *ComVmwareAdmiralComputeContainerHealthCheckerHealthConfig) validateHTTPVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareAdmiralComputeContainerHealthCheckerHealthConfigTypeHTTPVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareAdmiralComputeContainerHealthCheckerHealthConfig) validateHTTPVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateHTTPVersionEnum("httpVersion", "body", m.HTTPVersion); err != nil {
		return err
	}

	return nil
}

var comVmwareAdmiralComputeContainerHealthCheckerHealthConfigTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HTTP","TCP","COMMAND"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareAdmiralComputeContainerHealthCheckerHealthConfigTypeProtocolPropEnum = append(comVmwareAdmiralComputeContainerHealthCheckerHealthConfigTypeProtocolPropEnum, v)
	}
}

const (
	// ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigProtocolHTTP captures enum value "HTTP"
	ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigProtocolHTTP string = "HTTP"
	// ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigProtocolTCP captures enum value "TCP"
	ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigProtocolTCP string = "TCP"
	// ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigProtocolCOMMAND captures enum value "COMMAND"
	ComVmwareAdmiralComputeContainerHealthCheckerHealthConfigProtocolCOMMAND string = "COMMAND"
)

// prop value enum
func (m *ComVmwareAdmiralComputeContainerHealthCheckerHealthConfig) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareAdmiralComputeContainerHealthCheckerHealthConfigTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareAdmiralComputeContainerHealthCheckerHealthConfig) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeContainerHealthCheckerHealthConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeContainerHealthCheckerHealthConfig) UnmarshalBinary(b []byte) error {
	var res ComVmwareAdmiralComputeContainerHealthCheckerHealthConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
