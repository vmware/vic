package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwareAdmiralComputeContainerContainerServiceContainerState com vmware admiral compute container container service container state
// swagger:model com:vmware:admiral:compute:container:ContainerService:ContainerState
type ComVmwareAdmiralComputeContainerContainerServiceContainerState struct {

	// Defines which adapter which serve the provision request
	AdapterManagementReference strfmt.URI `json:"adapterManagementReference,omitempty"`

	// Defines the address of the container
	Address string `json:"address,omitempty"`

	// Unmodeled container attributes
	Attributes map[string]string `json:"attributes,omitempty"`

	// Commands to run.
	Command []string `json:"command"`

	// Link to CompositeComponent when a container is part of App/Composition request.
	CompositeComponentLink string `json:"compositeComponentLink,omitempty"`

	// Percentages of the relative CPU sharing in a given resource pool. This is not an actual limit but a guideline of how much CPU should be divided among all containers running at a given time.
	CPUShares int64 `json:"cpuShares,omitempty"`

	// Container created time in milliseconds
	Created int64 `json:"created,omitempty"`

	// creation time micros
	CreationTimeMicros int64 `json:"creationTimeMicros,omitempty"`

	// custom properties
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// desc
	Desc string `json:"desc,omitempty"`

	// Defines the description of the container.
	DescriptionLink string `json:"descriptionLink,omitempty"`

	// A list of environment variables in the form of VAR=value.
	Env []string `json:"env"`

	// Add a custom host-to-IP mapping (host:ip)
	ExtraHosts []string `json:"extraHosts"`

	// group links
	GroupLinks []string `json:"groupLinks"`

	// Link to the resource placement associated with a given container instance. Null if no placement
	GroupResourcePlacementLink string `json:"groupResourcePlacementLink,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// The docker image.
	Image string `json:"image,omitempty"`

	// Is the docker container deleted by Admiral.
	IsDeleted bool `json:"isDeleted,omitempty"`

	// A list of services (in a blueprint) the container depends on.
	Links []string `json:"links"`

	// Effective memory limit
	MemoryLimit int64 `json:"memoryLimit,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// The list of names of a given container host.
	Names []string `json:"names"`

	// Joined networks.
	Networks map[string]string `json:"networks,omitempty"`

	// Container host link
	ParentLink string `json:"parentLink,omitempty"`

	// Port bindings in the format ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort where range of ports can also be provided
	Ports []*ComVmwareAdmiralComputeContainerPortBinding `json:"ports"`

	// Container state indicating runtime state of a container instance.
	PowerState string `json:"powerState,omitempty"`

	// region Id
	RegionID string `json:"regionId,omitempty"`

	// Container started time in milliseconds
	Started int64 `json:"started,omitempty"`

	// Status of the container
	Status string `json:"status,omitempty"`

	// Storage limit in bytes
	StorageLimit int64 `json:"storageLimit,omitempty"`

	// Is system container
	System bool `json:"system,omitempty"`

	// tag links
	TagLinks []string `json:"tagLinks"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`

	// A list of resource limits to set in the container
	Ulimits []*ComVmwareAdmiralComputeContainerUlimit `json:"ulimits"`

	// Specify volume driver name (default "local")
	VolumeDriver string `json:"volumeDriver,omitempty"`

	// Mount a volume e.g /host:/container[:ro] or just named volume like 'vol1'
	Volumes []string `json:"volumes"`

	// Volumes from the specified container(s) of the format <container name>[:<ro|rw>]
	VolumesFrom []string `json:"volumesFrom"`
}

// Validate validates this com vmware admiral compute container container service container state
func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnv(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExtraHosts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNames(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePowerState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTagLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUlimits(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumesFrom(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validateCommand(formats strfmt.Registry) error {

	if swag.IsZero(m.Command) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validateEnv(formats strfmt.Registry) error {

	if swag.IsZero(m.Env) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validateExtraHosts(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtraHosts) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validateGroupLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validateNames(formats strfmt.Registry) error {

	if swag.IsZero(m.Names) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {

		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {

			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var comVmwareAdmiralComputeContainerContainerServiceContainerStateTypePowerStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","PROVISIONING","RUNNING","PAUSED","STOPPED","RETIRED","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareAdmiralComputeContainerContainerServiceContainerStateTypePowerStatePropEnum = append(comVmwareAdmiralComputeContainerContainerServiceContainerStateTypePowerStatePropEnum, v)
	}
}

const (
	// ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStateUNKNOWN captures enum value "UNKNOWN"
	ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStateUNKNOWN string = "UNKNOWN"
	// ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStatePROVISIONING captures enum value "PROVISIONING"
	ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStatePROVISIONING string = "PROVISIONING"
	// ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStateRUNNING captures enum value "RUNNING"
	ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStateRUNNING string = "RUNNING"
	// ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStatePAUSED captures enum value "PAUSED"
	ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStatePAUSED string = "PAUSED"
	// ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStateSTOPPED captures enum value "STOPPED"
	ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStateSTOPPED string = "STOPPED"
	// ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStateRETIRED captures enum value "RETIRED"
	ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStateRETIRED string = "RETIRED"
	// ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStateERROR captures enum value "ERROR"
	ComVmwareAdmiralComputeContainerContainerServiceContainerStatePowerStateERROR string = "ERROR"
)

// prop value enum
func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validatePowerStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareAdmiralComputeContainerContainerServiceContainerStateTypePowerStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validatePowerState(formats strfmt.Registry) error {

	if swag.IsZero(m.PowerState) { // not required
		return nil
	}

	// value enum
	if err := m.validatePowerStateEnum("powerState", "body", m.PowerState); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validateTagLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TagLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validateUlimits(formats strfmt.Registry) error {

	if swag.IsZero(m.Ulimits) { // not required
		return nil
	}

	for i := 0; i < len(m.Ulimits); i++ {

		if swag.IsZero(m.Ulimits[i]) { // not required
			continue
		}

		if m.Ulimits[i] != nil {

			if err := m.Ulimits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ulimits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validateVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) validateVolumesFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumesFrom) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeContainerContainerServiceContainerState) UnmarshalBinary(b []byte) error {
	var res ComVmwareAdmiralComputeContainerContainerServiceContainerState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
