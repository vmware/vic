package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume com vmware admiral compute kubernetes entities volumes volume
// swagger:model com:vmware:admiral:compute:kubernetes:entities:volumes:Volume
type ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume struct {

	// aws elastic block store
	AwsElasticBlockStore *ComVmwareAdmiralComputeKubernetesEntitiesVolumesAWSElasticBlockStoreVolumeSource `json:"awsElasticBlockStore,omitempty"`

	// azure disk
	AzureDisk *ComVmwareAdmiralComputeKubernetesEntitiesVolumesAzureDiskVolumeSource `json:"azureDisk,omitempty"`

	// azure file
	AzureFile *ComVmwareAdmiralComputeKubernetesEntitiesVolumesAzureFileVolumeSource `json:"azureFile,omitempty"`

	// cephfs
	Cephfs *ComVmwareAdmiralComputeKubernetesEntitiesVolumesCephFSVolumeSource `json:"cephfs,omitempty"`

	// cinder
	Cinder *ComVmwareAdmiralComputeKubernetesEntitiesVolumesCinderVolumeSource `json:"cinder,omitempty"`

	// config map
	ConfigMap *ComVmwareAdmiralComputeKubernetesEntitiesVolumesConfigMapVolumeSource `json:"configMap,omitempty"`

	// downward API
	DownwardAPI *ComVmwareAdmiralComputeKubernetesEntitiesVolumesDownwardAPIVolumeSource `json:"downwardAPI,omitempty"`

	// empty dir
	EmptyDir *ComVmwareAdmiralComputeKubernetesEntitiesVolumesEmptyDirVolumeSource `json:"emptyDir,omitempty"`

	// fc
	Fc *ComVmwareAdmiralComputeKubernetesEntitiesVolumesFCVolumeSource `json:"fc,omitempty"`

	// flex volume
	FlexVolume *ComVmwareAdmiralComputeKubernetesEntitiesVolumesFlexVolumeSource `json:"flexVolume,omitempty"`

	// gce persistent disk
	GcePersistentDisk *ComVmwareAdmiralComputeKubernetesEntitiesVolumesGCEPersistentDiskVolumeSource `json:"gcePersistentDisk,omitempty"`

	// git repo
	GitRepo *ComVmwareAdmiralComputeKubernetesEntitiesVolumesGitRepoVolumeSource `json:"gitRepo,omitempty"`

	// glusterfs
	Glusterfs *ComVmwareAdmiralComputeKubernetesEntitiesVolumesGlusterfsVolumeSource `json:"glusterfs,omitempty"`

	// host path
	HostPath *ComVmwareAdmiralComputeKubernetesEntitiesVolumesHostPathVolumeSource `json:"hostPath,omitempty"`

	// iscsi
	Iscsi *ComVmwareAdmiralComputeKubernetesEntitiesVolumesISCSIVolumeSource `json:"iscsi,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// nfs
	Nfs *ComVmwareAdmiralComputeKubernetesEntitiesVolumesNFSVolumeSource `json:"nfs,omitempty"`

	// persistent volume claim
	PersistentVolumeClaim *ComVmwareAdmiralComputeKubernetesEntitiesVolumesPersistentVolumeClaimVolumeSource `json:"persistentVolumeClaim,omitempty"`

	// photon persistent disk
	PhotonPersistentDisk *ComVmwareAdmiralComputeKubernetesEntitiesVolumesPhotonPersistentDiskVolumeSource `json:"photonPersistentDisk,omitempty"`

	// quobyte
	Quobyte *ComVmwareAdmiralComputeKubernetesEntitiesVolumesQuobyteVolumeSource `json:"quobyte,omitempty"`

	// rbd
	Rbd *ComVmwareAdmiralComputeKubernetesEntitiesVolumesRBDVolumeSource `json:"rbd,omitempty"`

	// secret
	Secret *ComVmwareAdmiralComputeKubernetesEntitiesVolumesSecretVolumeSource `json:"secret,omitempty"`

	// vsphere volume
	VsphereVolume *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVsphereVirtualDiskVolumeSource `json:"vsphereVolume,omitempty"`
}

// Validate validates this com vmware admiral compute kubernetes entities volumes volume
func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsElasticBlockStore(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAzureDisk(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAzureFile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCephfs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCinder(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConfigMap(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDownwardAPI(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEmptyDir(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFc(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFlexVolume(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGcePersistentDisk(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGitRepo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGlusterfs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostPath(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIscsi(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNfs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePersistentVolumeClaim(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePhotonPersistentDisk(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQuobyte(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRbd(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSecret(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVsphereVolume(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateAwsElasticBlockStore(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsElasticBlockStore) { // not required
		return nil
	}

	if m.AwsElasticBlockStore != nil {

		if err := m.AwsElasticBlockStore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsElasticBlockStore")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateAzureDisk(formats strfmt.Registry) error {

	if swag.IsZero(m.AzureDisk) { // not required
		return nil
	}

	if m.AzureDisk != nil {

		if err := m.AzureDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureDisk")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateAzureFile(formats strfmt.Registry) error {

	if swag.IsZero(m.AzureFile) { // not required
		return nil
	}

	if m.AzureFile != nil {

		if err := m.AzureFile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureFile")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateCephfs(formats strfmt.Registry) error {

	if swag.IsZero(m.Cephfs) { // not required
		return nil
	}

	if m.Cephfs != nil {

		if err := m.Cephfs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cephfs")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateCinder(formats strfmt.Registry) error {

	if swag.IsZero(m.Cinder) { // not required
		return nil
	}

	if m.Cinder != nil {

		if err := m.Cinder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cinder")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateConfigMap(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigMap) { // not required
		return nil
	}

	if m.ConfigMap != nil {

		if err := m.ConfigMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configMap")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateDownwardAPI(formats strfmt.Registry) error {

	if swag.IsZero(m.DownwardAPI) { // not required
		return nil
	}

	if m.DownwardAPI != nil {

		if err := m.DownwardAPI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("downwardAPI")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateEmptyDir(formats strfmt.Registry) error {

	if swag.IsZero(m.EmptyDir) { // not required
		return nil
	}

	if m.EmptyDir != nil {

		if err := m.EmptyDir.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emptyDir")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateFc(formats strfmt.Registry) error {

	if swag.IsZero(m.Fc) { // not required
		return nil
	}

	if m.Fc != nil {

		if err := m.Fc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fc")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateFlexVolume(formats strfmt.Registry) error {

	if swag.IsZero(m.FlexVolume) { // not required
		return nil
	}

	if m.FlexVolume != nil {

		if err := m.FlexVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexVolume")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateGcePersistentDisk(formats strfmt.Registry) error {

	if swag.IsZero(m.GcePersistentDisk) { // not required
		return nil
	}

	if m.GcePersistentDisk != nil {

		if err := m.GcePersistentDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcePersistentDisk")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateGitRepo(formats strfmt.Registry) error {

	if swag.IsZero(m.GitRepo) { // not required
		return nil
	}

	if m.GitRepo != nil {

		if err := m.GitRepo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gitRepo")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateGlusterfs(formats strfmt.Registry) error {

	if swag.IsZero(m.Glusterfs) { // not required
		return nil
	}

	if m.Glusterfs != nil {

		if err := m.Glusterfs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("glusterfs")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateHostPath(formats strfmt.Registry) error {

	if swag.IsZero(m.HostPath) { // not required
		return nil
	}

	if m.HostPath != nil {

		if err := m.HostPath.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostPath")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateIscsi(formats strfmt.Registry) error {

	if swag.IsZero(m.Iscsi) { // not required
		return nil
	}

	if m.Iscsi != nil {

		if err := m.Iscsi.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateNfs(formats strfmt.Registry) error {

	if swag.IsZero(m.Nfs) { // not required
		return nil
	}

	if m.Nfs != nil {

		if err := m.Nfs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfs")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validatePersistentVolumeClaim(formats strfmt.Registry) error {

	if swag.IsZero(m.PersistentVolumeClaim) { // not required
		return nil
	}

	if m.PersistentVolumeClaim != nil {

		if err := m.PersistentVolumeClaim.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persistentVolumeClaim")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validatePhotonPersistentDisk(formats strfmt.Registry) error {

	if swag.IsZero(m.PhotonPersistentDisk) { // not required
		return nil
	}

	if m.PhotonPersistentDisk != nil {

		if err := m.PhotonPersistentDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("photonPersistentDisk")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateQuobyte(formats strfmt.Registry) error {

	if swag.IsZero(m.Quobyte) { // not required
		return nil
	}

	if m.Quobyte != nil {

		if err := m.Quobyte.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quobyte")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateRbd(formats strfmt.Registry) error {

	if swag.IsZero(m.Rbd) { // not required
		return nil
	}

	if m.Rbd != nil {

		if err := m.Rbd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rbd")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateSecret(formats strfmt.Registry) error {

	if swag.IsZero(m.Secret) { // not required
		return nil
	}

	if m.Secret != nil {

		if err := m.Secret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secret")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) validateVsphereVolume(formats strfmt.Registry) error {

	if swag.IsZero(m.VsphereVolume) { // not required
		return nil
	}

	if m.VsphereVolume != nil {

		if err := m.VsphereVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphereVolume")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume) UnmarshalBinary(b []byte) error {
	var res ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
