package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwareXenonServicesCommonQueryTaskQuerySpecification com vmware xenon services common query task query specification
// swagger:model com:vmware:xenon:services:common:QueryTask:QuerySpecification
type ComVmwareXenonServicesCommonQueryTaskQuerySpecification struct {

	// additional group sort terms
	AdditionalGroupSortTerms []*ComVmwareXenonServicesCommonQueryTaskQueryTerm `json:"additionalGroupSortTerms"`

	// additional sort terms
	AdditionalSortTerms []*ComVmwareXenonServicesCommonQueryTaskQueryTerm `json:"additionalSortTerms"`

	// expected result count
	ExpectedResultCount int64 `json:"expectedResultCount,omitempty"`

	// group by term
	GroupByTerm *ComVmwareXenonServicesCommonQueryTaskQueryTerm `json:"groupByTerm,omitempty"`

	// group result limit
	GroupResultLimit int64 `json:"groupResultLimit,omitempty"`

	// group sort order
	GroupSortOrder string `json:"groupSortOrder,omitempty"`

	// group sort term
	GroupSortTerm *ComVmwareXenonServicesCommonQueryTaskQueryTerm `json:"groupSortTerm,omitempty"`

	// link terms
	LinkTerms []*ComVmwareXenonServicesCommonQueryTaskQueryTerm `json:"linkTerms"`

	// options
	Options []string `json:"options"`

	// query
	Query *ComVmwareXenonServicesCommonQueryTaskQuery `json:"query,omitempty"`

	// result limit
	ResultLimit int64 `json:"resultLimit,omitempty"`

	// select terms
	SelectTerms []*ComVmwareXenonServicesCommonQueryTaskQueryTerm `json:"selectTerms"`

	// sort order
	SortOrder string `json:"sortOrder,omitempty"`

	// sort term
	SortTerm *ComVmwareXenonServicesCommonQueryTaskQueryTerm `json:"sortTerm,omitempty"`

	// time snapshot boundary micros
	TimeSnapshotBoundaryMicros int64 `json:"timeSnapshotBoundaryMicros,omitempty"`
}

// Validate validates this com vmware xenon services common query task query specification
func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalGroupSortTerms(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAdditionalSortTerms(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupByTerm(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupSortOrder(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupSortTerm(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinkTerms(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSelectTerms(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSortOrder(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSortTerm(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateAdditionalGroupSortTerms(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalGroupSortTerms) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalGroupSortTerms); i++ {

		if swag.IsZero(m.AdditionalGroupSortTerms[i]) { // not required
			continue
		}

		if m.AdditionalGroupSortTerms[i] != nil {

			if err := m.AdditionalGroupSortTerms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalGroupSortTerms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateAdditionalSortTerms(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalSortTerms) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalSortTerms); i++ {

		if swag.IsZero(m.AdditionalSortTerms[i]) { // not required
			continue
		}

		if m.AdditionalSortTerms[i] != nil {

			if err := m.AdditionalSortTerms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalSortTerms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateGroupByTerm(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupByTerm) { // not required
		return nil
	}

	if m.GroupByTerm != nil {

		if err := m.GroupByTerm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groupByTerm")
			}
			return err
		}
	}

	return nil
}

var comVmwareXenonServicesCommonQueryTaskQuerySpecificationTypeGroupSortOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASC","DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareXenonServicesCommonQueryTaskQuerySpecificationTypeGroupSortOrderPropEnum = append(comVmwareXenonServicesCommonQueryTaskQuerySpecificationTypeGroupSortOrderPropEnum, v)
	}
}

const (
	// ComVmwareXenonServicesCommonQueryTaskQuerySpecificationGroupSortOrderASC captures enum value "ASC"
	ComVmwareXenonServicesCommonQueryTaskQuerySpecificationGroupSortOrderASC string = "ASC"
	// ComVmwareXenonServicesCommonQueryTaskQuerySpecificationGroupSortOrderDESC captures enum value "DESC"
	ComVmwareXenonServicesCommonQueryTaskQuerySpecificationGroupSortOrderDESC string = "DESC"
)

// prop value enum
func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateGroupSortOrderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareXenonServicesCommonQueryTaskQuerySpecificationTypeGroupSortOrderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateGroupSortOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupSortOrder) { // not required
		return nil
	}

	// value enum
	if err := m.validateGroupSortOrderEnum("groupSortOrder", "body", m.GroupSortOrder); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateGroupSortTerm(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupSortTerm) { // not required
		return nil
	}

	if m.GroupSortTerm != nil {

		if err := m.GroupSortTerm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groupSortTerm")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateLinkTerms(formats strfmt.Registry) error {

	if swag.IsZero(m.LinkTerms) { // not required
		return nil
	}

	for i := 0; i < len(m.LinkTerms); i++ {

		if swag.IsZero(m.LinkTerms[i]) { // not required
			continue
		}

		if m.LinkTerms[i] != nil {

			if err := m.LinkTerms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("linkTerms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var comVmwareXenonServicesCommonQueryTaskQuerySpecificationOptionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONTINUOUS","COUNT","DO_NOT_REFRESH","TOP_RESULTS","EXPAND_CONTENT","EXPAND_SELECTED_FIELDS","EXPAND_BINARY_CONTENT","EXPAND_BUILTIN_CONTENT_ONLY","EXPAND_LINKS","INCLUDE_ALL_VERSIONS","INCLUDE_DELETED","SORT","TASK","BROADCAST","OWNER_SELECTION","SELECT_LINKS","GROUP_BY","TIME_SNAPSHOT","SINGLE_USE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareXenonServicesCommonQueryTaskQuerySpecificationOptionsItemsEnum = append(comVmwareXenonServicesCommonQueryTaskQuerySpecificationOptionsItemsEnum, v)
	}
}

func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateOptionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareXenonServicesCommonQueryTaskQuerySpecificationOptionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {

		// value enum
		if err := m.validateOptionsItemsEnum("options"+"."+strconv.Itoa(i), "body", m.Options[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(m.Query) { // not required
		return nil
	}

	if m.Query != nil {

		if err := m.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateSelectTerms(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectTerms) { // not required
		return nil
	}

	for i := 0; i < len(m.SelectTerms); i++ {

		if swag.IsZero(m.SelectTerms[i]) { // not required
			continue
		}

		if m.SelectTerms[i] != nil {

			if err := m.SelectTerms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("selectTerms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var comVmwareXenonServicesCommonQueryTaskQuerySpecificationTypeSortOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASC","DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareXenonServicesCommonQueryTaskQuerySpecificationTypeSortOrderPropEnum = append(comVmwareXenonServicesCommonQueryTaskQuerySpecificationTypeSortOrderPropEnum, v)
	}
}

const (
	// ComVmwareXenonServicesCommonQueryTaskQuerySpecificationSortOrderASC captures enum value "ASC"
	ComVmwareXenonServicesCommonQueryTaskQuerySpecificationSortOrderASC string = "ASC"
	// ComVmwareXenonServicesCommonQueryTaskQuerySpecificationSortOrderDESC captures enum value "DESC"
	ComVmwareXenonServicesCommonQueryTaskQuerySpecificationSortOrderDESC string = "DESC"
)

// prop value enum
func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateSortOrderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareXenonServicesCommonQueryTaskQuerySpecificationTypeSortOrderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateSortOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.SortOrder) { // not required
		return nil
	}

	// value enum
	if err := m.validateSortOrderEnum("sortOrder", "body", m.SortOrder); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) validateSortTerm(formats strfmt.Registry) error {

	if swag.IsZero(m.SortTerm) { // not required
		return nil
	}

	if m.SortTerm != nil {

		if err := m.SortTerm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sortTerm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareXenonServicesCommonQueryTaskQuerySpecification) UnmarshalBinary(b []byte) error {
	var res ComVmwareXenonServicesCommonQueryTaskQuerySpecification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
