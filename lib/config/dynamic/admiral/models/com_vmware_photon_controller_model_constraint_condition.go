package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwarePhotonControllerModelConstraintCondition com vmware photon controller model constraint condition
// swagger:model com:vmware:photon:controller:model:Constraint:Condition
type ComVmwarePhotonControllerModelConstraintCondition struct {

	// enforcement
	Enforcement string `json:"enforcement,omitempty"`

	// expression
	Expression *ComVmwareXenonServicesCommonQueryTaskQueryTerm `json:"expression,omitempty"`

	// occurrence
	Occurrence string `json:"occurrence,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this com vmware photon controller model constraint condition
func (m *ComVmwarePhotonControllerModelConstraintCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnforcement(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExpression(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOccurrence(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var comVmwarePhotonControllerModelConstraintConditionTypeEnforcementPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HARD","SOFT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelConstraintConditionTypeEnforcementPropEnum = append(comVmwarePhotonControllerModelConstraintConditionTypeEnforcementPropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelConstraintConditionEnforcementHARD captures enum value "HARD"
	ComVmwarePhotonControllerModelConstraintConditionEnforcementHARD string = "HARD"
	// ComVmwarePhotonControllerModelConstraintConditionEnforcementSOFT captures enum value "SOFT"
	ComVmwarePhotonControllerModelConstraintConditionEnforcementSOFT string = "SOFT"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelConstraintCondition) validateEnforcementEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelConstraintConditionTypeEnforcementPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelConstraintCondition) validateEnforcement(formats strfmt.Registry) error {

	if swag.IsZero(m.Enforcement) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnforcementEnum("enforcement", "body", m.Enforcement); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelConstraintCondition) validateExpression(formats strfmt.Registry) error {

	if swag.IsZero(m.Expression) { // not required
		return nil
	}

	if m.Expression != nil {

		if err := m.Expression.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expression")
			}
			return err
		}
	}

	return nil
}

var comVmwarePhotonControllerModelConstraintConditionTypeOccurrencePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MUST_OCCUR","MUST_NOT_OCCUR","SHOULD_OCCUR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelConstraintConditionTypeOccurrencePropEnum = append(comVmwarePhotonControllerModelConstraintConditionTypeOccurrencePropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelConstraintConditionOccurrenceMUSTOCCUR captures enum value "MUST_OCCUR"
	ComVmwarePhotonControllerModelConstraintConditionOccurrenceMUSTOCCUR string = "MUST_OCCUR"
	// ComVmwarePhotonControllerModelConstraintConditionOccurrenceMUSTNOTOCCUR captures enum value "MUST_NOT_OCCUR"
	ComVmwarePhotonControllerModelConstraintConditionOccurrenceMUSTNOTOCCUR string = "MUST_NOT_OCCUR"
	// ComVmwarePhotonControllerModelConstraintConditionOccurrenceSHOULDOCCUR captures enum value "SHOULD_OCCUR"
	ComVmwarePhotonControllerModelConstraintConditionOccurrenceSHOULDOCCUR string = "SHOULD_OCCUR"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelConstraintCondition) validateOccurrenceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelConstraintConditionTypeOccurrencePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelConstraintCondition) validateOccurrence(formats strfmt.Registry) error {

	if swag.IsZero(m.Occurrence) { // not required
		return nil
	}

	// value enum
	if err := m.validateOccurrenceEnum("occurrence", "body", m.Occurrence); err != nil {
		return err
	}

	return nil
}

var comVmwarePhotonControllerModelConstraintConditionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TAG","FIELD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelConstraintConditionTypeTypePropEnum = append(comVmwarePhotonControllerModelConstraintConditionTypeTypePropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelConstraintConditionTypeTAG captures enum value "TAG"
	ComVmwarePhotonControllerModelConstraintConditionTypeTAG string = "TAG"
	// ComVmwarePhotonControllerModelConstraintConditionTypeFIELD captures enum value "FIELD"
	ComVmwarePhotonControllerModelConstraintConditionTypeFIELD string = "FIELD"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelConstraintCondition) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelConstraintConditionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelConstraintCondition) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelConstraintCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelConstraintCondition) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelConstraintCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
