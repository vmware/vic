package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwareXenonCommonSynchronizationTaskServiceState com vmware xenon common synchronization task service state
// swagger:model com:vmware:xenon:common:SynchronizationTaskService:State
type ComVmwareXenonCommonSynchronizationTaskServiceState struct {

	// child document index link
	ChildDocumentIndexLink string `json:"childDocumentIndexLink,omitempty"`

	// child options
	ChildOptions []string `json:"childOptions"`

	// factory self link
	FactorySelfLink string `json:"factorySelfLink,omitempty"`

	// factory state kind
	FactoryStateKind string `json:"factoryStateKind,omitempty"`

	// failure message
	FailureMessage string `json:"failureMessage,omitempty"`

	// membership update time micros
	MembershipUpdateTimeMicros int64 `json:"membershipUpdateTimeMicros,omitempty"`

	// node selector link
	NodeSelectorLink string `json:"nodeSelectorLink,omitempty"`

	// query page reference
	QueryPageReference strfmt.URI `json:"queryPageReference,omitempty"`

	// query result limit
	QueryResultLimit int64 `json:"queryResultLimit,omitempty"`

	// sub stage
	SubStage string `json:"subStage,omitempty"`

	// synch completion count
	SynchCompletionCount int64 `json:"synchCompletionCount,omitempty"`

	// task info
	TaskInfo *ComVmwareXenonCommonTaskState `json:"taskInfo,omitempty"`
}

// Validate validates this com vmware xenon common synchronization task service state
func (m *ComVmwareXenonCommonSynchronizationTaskServiceState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildOptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubStage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var comVmwareXenonCommonSynchronizationTaskServiceStateChildOptionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INSTRUMENTATION","PERIODIC_MAINTENANCE","PERSISTENCE","REPLICATION","OWNER_SELECTION","STRICT_UPDATE_CHECKING","HTML_USER_INTERFACE","CONCURRENT_UPDATE_HANDLING","CONCURRENT_GET_HANDLING","IDEMPOTENT_POST","ON_DEMAND_LOAD","IMMUTABLE","LIFO_QUEUE","URI_NAMESPACE_OWNER","CORE","UTILITY","FACTORY","FACTORY_ITEM","DOCUMENT_OWNER","TRANSACTION_PENDING","STATELESS","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareXenonCommonSynchronizationTaskServiceStateChildOptionsItemsEnum = append(comVmwareXenonCommonSynchronizationTaskServiceStateChildOptionsItemsEnum, v)
	}
}

func (m *ComVmwareXenonCommonSynchronizationTaskServiceState) validateChildOptionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareXenonCommonSynchronizationTaskServiceStateChildOptionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareXenonCommonSynchronizationTaskServiceState) validateChildOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.ChildOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.ChildOptions); i++ {

		// value enum
		if err := m.validateChildOptionsItemsEnum("childOptions"+"."+strconv.Itoa(i), "body", m.ChildOptions[i]); err != nil {
			return err
		}

	}

	return nil
}

var comVmwareXenonCommonSynchronizationTaskServiceStateTypeSubStagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["QUERY","SYNCHRONIZE","RESTART"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareXenonCommonSynchronizationTaskServiceStateTypeSubStagePropEnum = append(comVmwareXenonCommonSynchronizationTaskServiceStateTypeSubStagePropEnum, v)
	}
}

const (
	// ComVmwareXenonCommonSynchronizationTaskServiceStateSubStageQUERY captures enum value "QUERY"
	ComVmwareXenonCommonSynchronizationTaskServiceStateSubStageQUERY string = "QUERY"
	// ComVmwareXenonCommonSynchronizationTaskServiceStateSubStageSYNCHRONIZE captures enum value "SYNCHRONIZE"
	ComVmwareXenonCommonSynchronizationTaskServiceStateSubStageSYNCHRONIZE string = "SYNCHRONIZE"
	// ComVmwareXenonCommonSynchronizationTaskServiceStateSubStageRESTART captures enum value "RESTART"
	ComVmwareXenonCommonSynchronizationTaskServiceStateSubStageRESTART string = "RESTART"
)

// prop value enum
func (m *ComVmwareXenonCommonSynchronizationTaskServiceState) validateSubStageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareXenonCommonSynchronizationTaskServiceStateTypeSubStagePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareXenonCommonSynchronizationTaskServiceState) validateSubStage(formats strfmt.Registry) error {

	if swag.IsZero(m.SubStage) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubStageEnum("subStage", "body", m.SubStage); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwareXenonCommonSynchronizationTaskServiceState) validateTaskInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskInfo) { // not required
		return nil
	}

	if m.TaskInfo != nil {

		if err := m.TaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareXenonCommonSynchronizationTaskServiceState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareXenonCommonSynchronizationTaskServiceState) UnmarshalBinary(b []byte) error {
	var res ComVmwareXenonCommonSynchronizationTaskServiceState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
