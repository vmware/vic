package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallback com vmware admiral service common extensibility subscription callback service extensibility subscription callback
// swagger:model com:vmware:admiral:service:common:ExtensibilitySubscriptionCallbackService:ExtensibilitySubscriptionCallback
type ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallback struct {

	// Custom properties.
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// Due time of the reply.
	Due JavaTimeLocalDateTime `json:"due,omitempty"`

	// Defines Task fields which will be sent to client for information about the task.
	NotificationPayload string `json:"notificationPayload,omitempty"`

	// Defines Task fields which will be merged when subscriber return response.
	ReplyPayload *ComVmwareAdmiralServiceCommonServiceTaskCallbackServiceTaskCallbackResponse `json:"replyPayload,omitempty"`

	// link to a service that will receive updates when the task changes state.
	RequestTrackerLink string `json:"requestTrackerLink,omitempty"`

	// Resume counter
	RetryCounter int64 `json:"retryCounter,omitempty"`

	// Callback address
	ServiceCallback strfmt.URI `json:"serviceCallback,omitempty"`

	// Callback link and response from the service initiated this task.
	ServiceTaskCallback *ComVmwareAdmiralServiceCommonServiceTaskCallback `json:"serviceTaskCallback,omitempty"`

	// State status
	Status string `json:"status,omitempty"`

	// Status message
	StatusMessage string `json:"statusMessage,omitempty"`

	//  Describes a service task state.
	TaskInfo *ComVmwareXenonCommonTaskState `json:"taskInfo,omitempty"`

	// Task class name
	TaskStateClassName string `json:"taskStateClassName,omitempty"`

	// Task state json
	TaskStateJSON string `json:"taskStateJson,omitempty"`

	//  Describes a service task sub stage.
	TaskSubStage string `json:"taskSubStage,omitempty"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`
}

// Validate validates this com vmware admiral service common extensibility subscription callback service extensibility subscription callback
func (m *ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallback) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReplyPayload(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceTaskCallback(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallback) validateReplyPayload(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplyPayload) { // not required
		return nil
	}

	if m.ReplyPayload != nil {

		if err := m.ReplyPayload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replyPayload")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallback) validateServiceTaskCallback(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceTaskCallback) { // not required
		return nil
	}

	if m.ServiceTaskCallback != nil {

		if err := m.ServiceTaskCallback.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceTaskCallback")
			}
			return err
		}
	}

	return nil
}

var comVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallbackTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BLOCKED","RESUME","DONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallbackTypeStatusPropEnum = append(comVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallbackTypeStatusPropEnum, v)
	}
}

const (
	// ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallbackStatusBLOCKED captures enum value "BLOCKED"
	ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallbackStatusBLOCKED string = "BLOCKED"
	// ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallbackStatusRESUME captures enum value "RESUME"
	ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallbackStatusRESUME string = "RESUME"
	// ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallbackStatusDONE captures enum value "DONE"
	ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallbackStatusDONE string = "DONE"
)

// prop value enum
func (m *ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallback) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallbackTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallback) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallback) validateTaskInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskInfo) { // not required
		return nil
	}

	if m.TaskInfo != nil {

		if err := m.TaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallback) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallback) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallback) UnmarshalBinary(b []byte) error {
	var res ComVmwareAdmiralServiceCommonExtensibilitySubscriptionCallbackServiceExtensibilitySubscriptionCallback
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
