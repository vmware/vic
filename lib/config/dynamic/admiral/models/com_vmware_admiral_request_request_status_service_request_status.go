package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ComVmwareAdmiralRequestRequestStatusServiceRequestStatus com vmware admiral request request status service request status
// swagger:model com:vmware:admiral:request:RequestStatusService:RequestStatus
type ComVmwareAdmiralRequestRequestStatusServiceRequestStatus struct {

	// component
	Component string `json:"component,omitempty"`

	// components
	Components []*ComVmwareAdmiralRequestCompositionCompositionGraphResourceNode `json:"components"`

	// event log link
	EventLogLink string `json:"eventLogLink,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// phase
	Phase string `json:"phase,omitempty"`

	// progress
	Progress int64 `json:"progress,omitempty"`

	// request progress by component
	RequestProgressByComponent map[string]string `json:"requestProgressByComponent,omitempty"`

	// resource links
	ResourceLinks []string `json:"resourceLinks"`

	// sub stage
	SubStage string `json:"subStage,omitempty"`

	// task info
	TaskInfo *ComVmwareXenonCommonTaskState `json:"taskInfo,omitempty"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`

	// tracked allocation tasks by resource type
	TrackedAllocationTasksByResourceType map[string]string `json:"trackedAllocationTasksByResourceType,omitempty"`

	// tracked execution tasks by resource type
	TrackedExecutionTasksByResourceType map[string]string `json:"trackedExecutionTasksByResourceType,omitempty"`
}

// Validate validates this com vmware admiral request request status service request status
func (m *ComVmwareAdmiralRequestRequestStatusServiceRequestStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwareAdmiralRequestRequestStatusServiceRequestStatus) validateComponents(formats strfmt.Registry) error {

	if swag.IsZero(m.Components) { // not required
		return nil
	}

	for i := 0; i < len(m.Components); i++ {

		if swag.IsZero(m.Components[i]) { // not required
			continue
		}

		if m.Components[i] != nil {

			if err := m.Components[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComVmwareAdmiralRequestRequestStatusServiceRequestStatus) validateResourceLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralRequestRequestStatusServiceRequestStatus) validateTaskInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskInfo) { // not required
		return nil
	}

	if m.TaskInfo != nil {

		if err := m.TaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralRequestRequestStatusServiceRequestStatus) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareAdmiralRequestRequestStatusServiceRequestStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareAdmiralRequestRequestStatusServiceRequestStatus) UnmarshalBinary(b []byte) error {
	var res ComVmwareAdmiralRequestRequestStatusServiceRequestStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
