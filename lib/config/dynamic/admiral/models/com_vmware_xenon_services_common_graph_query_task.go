package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwareXenonServicesCommonGraphQueryTask com vmware xenon services common graph query task
// swagger:model com:vmware:xenon:services:common:GraphQueryTask
type ComVmwareXenonServicesCommonGraphQueryTask struct {

	// failure message
	FailureMessage string `json:"failureMessage,omitempty"`

	// options
	Options []string `json:"options"`

	// stages
	Stages []*ComVmwareXenonServicesCommonQueryTask `json:"stages"`

	// task info
	TaskInfo *ComVmwareXenonCommonTaskState `json:"taskInfo,omitempty"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`
}

// Validate validates this com vmware xenon services common graph query task
func (m *ComVmwareXenonServicesCommonGraphQueryTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var comVmwareXenonServicesCommonGraphQueryTaskOptionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FILTER_STAGE_RESULTS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareXenonServicesCommonGraphQueryTaskOptionsItemsEnum = append(comVmwareXenonServicesCommonGraphQueryTaskOptionsItemsEnum, v)
	}
}

func (m *ComVmwareXenonServicesCommonGraphQueryTask) validateOptionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareXenonServicesCommonGraphQueryTaskOptionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareXenonServicesCommonGraphQueryTask) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {

		// value enum
		if err := m.validateOptionsItemsEnum("options"+"."+strconv.Itoa(i), "body", m.Options[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ComVmwareXenonServicesCommonGraphQueryTask) validateStages(formats strfmt.Registry) error {

	if swag.IsZero(m.Stages) { // not required
		return nil
	}

	for i := 0; i < len(m.Stages); i++ {

		if swag.IsZero(m.Stages[i]) { // not required
			continue
		}

		if m.Stages[i] != nil {

			if err := m.Stages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComVmwareXenonServicesCommonGraphQueryTask) validateTaskInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskInfo) { // not required
		return nil
	}

	if m.TaskInfo != nil {

		if err := m.TaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareXenonServicesCommonGraphQueryTask) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareXenonServicesCommonGraphQueryTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareXenonServicesCommonGraphQueryTask) UnmarshalBinary(b []byte) error {
	var res ComVmwareXenonServicesCommonGraphQueryTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
