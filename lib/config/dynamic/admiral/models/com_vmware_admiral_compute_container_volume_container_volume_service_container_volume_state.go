package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeState com vmware admiral compute container volume container volume service container volume state
// swagger:model com:vmware:admiral:compute:container:volume:ContainerVolumeService:ContainerVolumeState
type ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeState struct {

	// Defines which adapter will serve the provision request
	AdapterManagementReference strfmt.URI `json:"adapterManagementReference,omitempty"`

	// Links to CompositeComponents when a volume is part of App/Composition request.
	CompositeComponentLinks []string `json:"compositeComponentLinks"`

	// Volume connected time in milliseconds
	Connected int64 `json:"connected,omitempty"`

	// creation time micros
	CreationTimeMicros int64 `json:"creationTimeMicros,omitempty"`

	// custom properties
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// desc
	Desc string `json:"desc,omitempty"`

	// Defines the description of the volume.
	DescriptionLink string `json:"descriptionLink,omitempty"`

	// Name of the volume driver to use. Defaults to local for the name.
	Driver string `json:"driver,omitempty"`

	// If set to true, specifies that this volume exists independently of any application.
	External bool `json:"external,omitempty"`

	// group links
	GroupLinks []string `json:"groupLinks"`

	// id
	ID string `json:"id,omitempty"`

	// Mount path of the volume on the host.
	Mountpoint string `json:"mountpoint,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// A map of field-value pairs for a given volume. These are used to specify volume options that are used by the volume drivers.
	Options map[string]string `json:"options,omitempty"`

	// Reference to the host that this volume was created on.
	OriginatingHostLink string `json:"originatingHostLink,omitempty"`

	// Container host links
	ParentLinks []string `json:"parentLinks"`

	// Volume state indicating runtime state of a volume instance.
	PowerState string `json:"powerState,omitempty"`

	// region Id
	RegionID string `json:"regionId,omitempty"`

	// Scope describes the level at which the volume exists, can be one of global for cluster-wide or local for machine level. The default is local.
	Scope string `json:"scope,omitempty"`

	// Low-level details about the volume, provided by the volume driver. Details are returned as a map with key/value pairs: {"key":"value","key2":"value2"}
	Status map[string]string `json:"status,omitempty"`

	// tag links
	TagLinks []string `json:"tagLinks"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`
}

// Validate validates this com vmware admiral compute container volume container volume service container volume state
func (m *ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompositeComponentLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParentLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePowerState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTagLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeState) validateCompositeComponentLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.CompositeComponentLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeState) validateGroupLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeState) validateParentLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentLinks) { // not required
		return nil
	}

	return nil
}

var comVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStateTypePowerStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","PROVISIONING","CONNECTED","RETIRED","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStateTypePowerStatePropEnum = append(comVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStateTypePowerStatePropEnum, v)
	}
}

const (
	// ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStatePowerStateUNKNOWN captures enum value "UNKNOWN"
	ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStatePowerStateUNKNOWN string = "UNKNOWN"
	// ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStatePowerStatePROVISIONING captures enum value "PROVISIONING"
	ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStatePowerStatePROVISIONING string = "PROVISIONING"
	// ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStatePowerStateCONNECTED captures enum value "CONNECTED"
	ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStatePowerStateCONNECTED string = "CONNECTED"
	// ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStatePowerStateRETIRED captures enum value "RETIRED"
	ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStatePowerStateRETIRED string = "RETIRED"
	// ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStatePowerStateERROR captures enum value "ERROR"
	ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStatePowerStateERROR string = "ERROR"
)

// prop value enum
func (m *ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeState) validatePowerStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeStateTypePowerStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeState) validatePowerState(formats strfmt.Registry) error {

	if swag.IsZero(m.PowerState) { // not required
		return nil
	}

	// value enum
	if err := m.validatePowerStateEnum("powerState", "body", m.PowerState); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeState) validateTagLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TagLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeState) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeState) UnmarshalBinary(b []byte) error {
	var res ComVmwareAdmiralComputeContainerVolumeContainerVolumeServiceContainerVolumeState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
