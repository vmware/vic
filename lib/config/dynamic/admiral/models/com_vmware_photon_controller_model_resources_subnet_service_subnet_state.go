package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetState com vmware photon controller model resources subnet service subnet state
// swagger:model com:vmware:photon:controller:model:resources:SubnetService:SubnetState
type ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetState struct {

	// creation time micros
	CreationTimeMicros int64 `json:"creationTimeMicros,omitempty"`

	// custom properties
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// default for zone
	DefaultForZone bool `json:"defaultForZone,omitempty"`

	// desc
	Desc string `json:"desc,omitempty"`

	// dns search domains
	DNSSearchDomains []string `json:"dnsSearchDomains"`

	// dns server addresses
	DNSServerAddresses []string `json:"dnsServerAddresses"`

	// domain
	Domain string `json:"domain,omitempty"`

	// endpoint link
	EndpointLink string `json:"endpointLink,omitempty"`

	// gateway address
	GatewayAddress string `json:"gatewayAddress,omitempty"`

	// group links
	GroupLinks []string `json:"groupLinks"`

	// id
	ID string `json:"id,omitempty"`

	// instance adapter reference
	InstanceAdapterReference strfmt.URI `json:"instanceAdapterReference,omitempty"`

	// Lifecycle state indicating runtime state of a resource instance.
	LifecycleState string `json:"lifecycleState,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// network link
	NetworkLink string `json:"networkLink,omitempty"`

	// region Id
	RegionID string `json:"regionId,omitempty"`

	// subnet c ID r
	SubnetCIDR string `json:"subnetCIDR,omitempty"`

	// support public Ip address
	SupportPublicIPAddress bool `json:"supportPublicIpAddress,omitempty"`

	// tag links
	TagLinks []string `json:"tagLinks"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`

	// type
	Type string `json:"type,omitempty"`

	// zone Id
	ZoneID string `json:"zoneId,omitempty"`
}

// Validate validates this com vmware photon controller model resources subnet service subnet state
func (m *ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNSSearchDomains(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDNSServerAddresses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTagLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetState) validateDNSSearchDomains(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSSearchDomains) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetState) validateDNSServerAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSServerAddresses) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetState) validateGroupLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupLinks) { // not required
		return nil
	}

	return nil
}

var comVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","READY","SUSPEND","STOPPED","RETIRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateTypeLifecycleStatePropEnum = append(comVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateTypeLifecycleStatePropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateLifecycleStatePROVISIONING string = "PROVISIONING"
	// ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateLifecycleStateREADY captures enum value "READY"
	ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateLifecycleStateREADY string = "READY"
	// ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateLifecycleStateSUSPEND captures enum value "SUSPEND"
	ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateLifecycleStateSUSPEND string = "SUSPEND"
	// ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateLifecycleStateSTOPPED captures enum value "STOPPED"
	ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateLifecycleStateSTOPPED string = "STOPPED"
	// ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateLifecycleStateRETIRED captures enum value "RETIRED"
	ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateLifecycleStateRETIRED string = "RETIRED"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetState) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelResourcesSubnetServiceSubnetStateTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetState) validateLifecycleState(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleState) { // not required
		return nil
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetState) validateTagLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TagLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetState) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetState) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelResourcesSubnetServiceSubnetState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
