package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ComVmwarePhotonControllerModelTasksSubTaskServiceSubTaskState com vmware photon controller model tasks sub task service sub task state
// swagger:model com:vmware:photon:controller:model:tasks:SubTaskService:SubTaskState
type ComVmwarePhotonControllerModelTasksSubTaskServiceSubTaskState struct {

	// completed
	Completed []*ComVmwarePhotonControllerModelAdapterapiResourceOperationResponse `json:"completed"`

	// completions remaining
	CompletionsRemaining int64 `json:"completionsRemaining,omitempty"`

	// error threshold
	ErrorThreshold float64 `json:"errorThreshold,omitempty"`

	// fail count
	FailCount int64 `json:"failCount,omitempty"`

	// failure message
	FailureMessage string `json:"failureMessage,omitempty"`

	// failures
	Failures []*ComVmwarePhotonControllerModelAdapterapiResourceOperationResponse `json:"failures"`

	// finished count
	FinishedCount int64 `json:"finishedCount,omitempty"`

	// service task callback
	ServiceTaskCallback *ComVmwarePhotonControllerModelTasksServiceTaskCallback `json:"serviceTaskCallback,omitempty"`

	// task info
	TaskInfo *ComVmwareXenonCommonTaskState `json:"taskInfo,omitempty"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`
}

// Validate validates this com vmware photon controller model tasks sub task service sub task state
func (m *ComVmwarePhotonControllerModelTasksSubTaskServiceSubTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompleted(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFailures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceTaskCallback(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelTasksSubTaskServiceSubTaskState) validateCompleted(formats strfmt.Registry) error {

	if swag.IsZero(m.Completed) { // not required
		return nil
	}

	for i := 0; i < len(m.Completed); i++ {

		if swag.IsZero(m.Completed[i]) { // not required
			continue
		}

		if m.Completed[i] != nil {

			if err := m.Completed[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("completed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksSubTaskServiceSubTaskState) validateFailures(formats strfmt.Registry) error {

	if swag.IsZero(m.Failures) { // not required
		return nil
	}

	for i := 0; i < len(m.Failures); i++ {

		if swag.IsZero(m.Failures[i]) { // not required
			continue
		}

		if m.Failures[i] != nil {

			if err := m.Failures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksSubTaskServiceSubTaskState) validateServiceTaskCallback(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceTaskCallback) { // not required
		return nil
	}

	if m.ServiceTaskCallback != nil {

		if err := m.ServiceTaskCallback.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceTaskCallback")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksSubTaskServiceSubTaskState) validateTaskInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskInfo) { // not required
		return nil
	}

	if m.TaskInfo != nil {

		if err := m.TaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksSubTaskServiceSubTaskState) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksSubTaskServiceSubTaskState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksSubTaskServiceSubTaskState) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelTasksSubTaskServiceSubTaskState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
