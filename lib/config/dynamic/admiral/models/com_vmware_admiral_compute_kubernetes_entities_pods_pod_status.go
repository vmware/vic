package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ComVmwareAdmiralComputeKubernetesEntitiesPodsPodStatus com vmware admiral compute kubernetes entities pods pod status
// swagger:model com:vmware:admiral:compute:kubernetes:entities:pods:PodStatus
type ComVmwareAdmiralComputeKubernetesEntitiesPodsPodStatus struct {

	// conditions
	Conditions []*ComVmwareAdmiralComputeKubernetesEntitiesPodsPodCondition `json:"conditions"`

	// container statuses
	ContainerStatuses []*ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerStatus `json:"containerStatuses"`

	// host IP
	HostIP string `json:"hostIP,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// phase
	Phase string `json:"phase,omitempty"`

	// pod IP
	PodIP string `json:"podIP,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// start time
	StartTime string `json:"startTime,omitempty"`
}

// Validate validates this com vmware admiral compute kubernetes entities pods pod status
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContainerStatuses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodStatus) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {

		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {

			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodStatus) validateContainerStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainerStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.ContainerStatuses); i++ {

		if swag.IsZero(m.ContainerStatuses[i]) { // not required
			continue
		}

		if m.ContainerStatuses[i] != nil {

			if err := m.ContainerStatuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("containerStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodStatus) UnmarshalBinary(b []byte) error {
	var res ComVmwareAdmiralComputeKubernetesEntitiesPodsPodStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
