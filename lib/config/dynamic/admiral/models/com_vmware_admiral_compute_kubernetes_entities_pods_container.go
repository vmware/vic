package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer com vmware admiral compute kubernetes entities pods container
// swagger:model com:vmware:admiral:compute:kubernetes:entities:pods:Container
type ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer struct {

	// args
	Args []string `json:"args"`

	// command
	Command []string `json:"command"`

	// env
	Env []*ComVmwareAdmiralComputeKubernetesEntitiesPodsEnvVar `json:"env"`

	// image
	Image string `json:"image,omitempty"`

	// image pull policy
	ImagePullPolicy string `json:"imagePullPolicy,omitempty"`

	// lifecycle
	Lifecycle *ComVmwareAdmiralComputeKubernetesEntitiesPodsLifecycle `json:"lifecycle,omitempty"`

	// liveness probe
	LivenessProbe *ComVmwareAdmiralComputeKubernetesEntitiesPodsProbe `json:"livenessProbe,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ports
	Ports []*ComVmwareAdmiralComputeKubernetesEntitiesPodsContainerPort `json:"ports"`

	// readiness probe
	ReadinessProbe *ComVmwareAdmiralComputeKubernetesEntitiesPodsProbe `json:"readinessProbe,omitempty"`

	// resources
	Resources *ComVmwareAdmiralComputeKubernetesEntitiesCommonResourceRequirements `json:"resources,omitempty"`

	// security context
	SecurityContext *ComVmwareAdmiralComputeKubernetesEntitiesPodsSecurityContext `json:"securityContext,omitempty"`

	// stdin
	Stdin bool `json:"stdin,omitempty"`

	// stdin once
	StdinOnce bool `json:"stdinOnce,omitempty"`

	// termination message path
	TerminationMessagePath string `json:"terminationMessagePath,omitempty"`

	// tty
	Tty bool `json:"tty,omitempty"`

	// volume mounts
	VolumeMounts []*ComVmwareAdmiralComputeKubernetesEntitiesPodsVolumeMount `json:"volumeMounts"`

	// working dir
	WorkingDir string `json:"workingDir,omitempty"`
}

// Validate validates this com vmware admiral compute kubernetes entities pods container
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArgs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommand(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnv(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLivenessProbe(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReadinessProbe(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSecurityContext(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumeMounts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer) validateArgs(formats strfmt.Registry) error {

	if swag.IsZero(m.Args) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer) validateCommand(formats strfmt.Registry) error {

	if swag.IsZero(m.Command) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer) validateEnv(formats strfmt.Registry) error {

	if swag.IsZero(m.Env) { // not required
		return nil
	}

	for i := 0; i < len(m.Env); i++ {

		if swag.IsZero(m.Env[i]) { // not required
			continue
		}

		if m.Env[i] != nil {

			if err := m.Env[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("env" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer) validateLifecycle(formats strfmt.Registry) error {

	if swag.IsZero(m.Lifecycle) { // not required
		return nil
	}

	if m.Lifecycle != nil {

		if err := m.Lifecycle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lifecycle")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer) validateLivenessProbe(formats strfmt.Registry) error {

	if swag.IsZero(m.LivenessProbe) { // not required
		return nil
	}

	if m.LivenessProbe != nil {

		if err := m.LivenessProbe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("livenessProbe")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {

		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {

			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer) validateReadinessProbe(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadinessProbe) { // not required
		return nil
	}

	if m.ReadinessProbe != nil {

		if err := m.ReadinessProbe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readinessProbe")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {

		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer) validateSecurityContext(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityContext) { // not required
		return nil
	}

	if m.SecurityContext != nil {

		if err := m.SecurityContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityContext")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer) validateVolumeMounts(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeMounts) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeMounts); i++ {

		if swag.IsZero(m.VolumeMounts[i]) { // not required
			continue
		}

		if m.VolumeMounts[i] != nil {

			if err := m.VolumeMounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeMounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer) UnmarshalBinary(b []byte) error {
	var res ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
