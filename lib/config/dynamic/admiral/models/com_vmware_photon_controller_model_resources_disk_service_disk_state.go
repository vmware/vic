package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwarePhotonControllerModelResourcesDiskServiceDiskState com vmware photon controller model resources disk service disk state
// swagger:model com:vmware:photon:controller:model:resources:DiskService:DiskState
type ComVmwarePhotonControllerModelResourcesDiskServiceDiskState struct {

	// auth credentials link
	AuthCredentialsLink string `json:"authCredentialsLink,omitempty"`

	// boot arguments
	BootArguments []string `json:"bootArguments"`

	// boot config
	BootConfig *ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateBootConfig `json:"bootConfig,omitempty"`

	// boot order
	BootOrder int64 `json:"bootOrder,omitempty"`

	// capacity m bytes
	CapacityMBytes int64 `json:"capacityMBytes,omitempty"`

	// compute host link
	ComputeHostLink string `json:"computeHostLink,omitempty"`

	// constraint
	Constraint *ComVmwarePhotonControllerModelConstraint `json:"constraint,omitempty"`

	// creation time micros
	CreationTimeMicros int64 `json:"creationTimeMicros,omitempty"`

	// currency unit
	CurrencyUnit string `json:"currencyUnit,omitempty"`

	// custom properties
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// customization service reference
	CustomizationServiceReference strfmt.URI `json:"customizationServiceReference,omitempty"`

	// desc
	Desc string `json:"desc,omitempty"`

	// description link
	DescriptionLink string `json:"descriptionLink,omitempty"`

	// encrypted
	Encrypted bool `json:"encrypted,omitempty"`

	// endpoint link
	EndpointLink string `json:"endpointLink,omitempty"`

	// group links
	GroupLinks []string `json:"groupLinks"`

	// id
	ID string `json:"id,omitempty"`

	// image link
	ImageLink string `json:"imageLink,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// persistent
	Persistent bool `json:"persistent,omitempty"`

	// region Id
	RegionID string `json:"regionId,omitempty"`

	// resource pool link
	ResourcePoolLink string `json:"resourcePoolLink,omitempty"`

	// source image reference
	SourceImageReference strfmt.URI `json:"sourceImageReference,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// storage description link
	StorageDescriptionLink string `json:"storageDescriptionLink,omitempty"`

	// storage type
	StorageType string `json:"storageType,omitempty"`

	// tag links
	TagLinks []string `json:"tagLinks"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`

	// type
	Type string `json:"type,omitempty"`

	// zone Id
	ZoneID string `json:"zoneId,omitempty"`
}

// Validate validates this com vmware photon controller model resources disk service disk state
func (m *ComVmwarePhotonControllerModelResourcesDiskServiceDiskState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBootArguments(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBootConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConstraint(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTagLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesDiskServiceDiskState) validateBootArguments(formats strfmt.Registry) error {

	if swag.IsZero(m.BootArguments) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesDiskServiceDiskState) validateBootConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.BootConfig) { // not required
		return nil
	}

	if m.BootConfig != nil {

		if err := m.BootConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bootConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesDiskServiceDiskState) validateConstraint(formats strfmt.Registry) error {

	if swag.IsZero(m.Constraint) { // not required
		return nil
	}

	if m.Constraint != nil {

		if err := m.Constraint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("constraint")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesDiskServiceDiskState) validateGroupLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupLinks) { // not required
		return nil
	}

	return nil
}

var comVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DETACHED","ATTACHED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeStatusPropEnum = append(comVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeStatusPropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateStatusDETACHED captures enum value "DETACHED"
	ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateStatusDETACHED string = "DETACHED"
	// ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateStatusATTACHED captures enum value "ATTACHED"
	ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateStatusATTACHED string = "ATTACHED"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelResourcesDiskServiceDiskState) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesDiskServiceDiskState) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesDiskServiceDiskState) validateTagLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TagLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesDiskServiceDiskState) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

var comVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SSD","HDD","CDROM","FLOPPY","NETWORK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeTypePropEnum = append(comVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeTypePropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeSSD captures enum value "SSD"
	ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeSSD string = "SSD"
	// ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeHDD captures enum value "HDD"
	ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeHDD string = "HDD"
	// ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeCDROM captures enum value "CDROM"
	ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeCDROM string = "CDROM"
	// ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeFLOPPY captures enum value "FLOPPY"
	ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeFLOPPY string = "FLOPPY"
	// ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeNETWORK captures enum value "NETWORK"
	ComVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeNETWORK string = "NETWORK"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelResourcesDiskServiceDiskState) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelResourcesDiskServiceDiskStateTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesDiskServiceDiskState) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelResourcesDiskServiceDiskState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelResourcesDiskServiceDiskState) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelResourcesDiskServiceDiskState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
