package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwarePhotonControllerModelResourcesComputeServiceComputeState com vmware photon controller model resources compute service compute state
// swagger:model com:vmware:photon:controller:model:resources:ComputeService:ComputeState
type ComVmwarePhotonControllerModelResourcesComputeServiceComputeState struct {

	// adapter management reference
	AdapterManagementReference strfmt.URI `json:"adapterManagementReference,omitempty"`

	// address
	Address string `json:"address,omitempty"`

	// boot adapter reference
	BootAdapterReference strfmt.URI `json:"bootAdapterReference,omitempty"`

	// cpu count
	CPUCount int64 `json:"cpuCount,omitempty"`

	// cpu mhz per core
	CPUMhzPerCore int64 `json:"cpuMhzPerCore,omitempty"`

	// creation time micros
	CreationTimeMicros int64 `json:"creationTimeMicros,omitempty"`

	// custom properties
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// desc
	Desc string `json:"desc,omitempty"`

	// description link
	DescriptionLink string `json:"descriptionLink,omitempty"`

	// disk links
	DiskLinks []string `json:"diskLinks"`

	// endpoint link
	EndpointLink string `json:"endpointLink,omitempty"`

	// enumeration adapter reference
	EnumerationAdapterReference strfmt.URI `json:"enumerationAdapterReference,omitempty"`

	// environment name
	EnvironmentName string `json:"environmentName,omitempty"`

	// gpu count
	GpuCount int64 `json:"gpuCount,omitempty"`

	// group links
	GroupLinks []string `json:"groupLinks"`

	// health adapter reference
	HealthAdapterReference strfmt.URI `json:"healthAdapterReference,omitempty"`

	// host name
	HostName string `json:"hostName,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// instance adapter reference
	InstanceAdapterReference strfmt.URI `json:"instanceAdapterReference,omitempty"`

	// instance type
	InstanceType string `json:"instanceType,omitempty"`

	// Lifecycle state indicating runtime state of a resource instance.
	LifecycleState string `json:"lifecycleState,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// network interface links
	NetworkInterfaceLinks []string `json:"networkInterfaceLinks"`

	// parent link
	ParentLink string `json:"parentLink,omitempty"`

	// power adapter reference
	PowerAdapterReference strfmt.URI `json:"powerAdapterReference,omitempty"`

	// power state
	PowerState string `json:"powerState,omitempty"`

	// primary m a c
	PrimaryMAC string `json:"primaryMAC,omitempty"`

	// region Id
	RegionID string `json:"regionId,omitempty"`

	// resource pool link
	ResourcePoolLink string `json:"resourcePoolLink,omitempty"`

	// stats adapter reference
	StatsAdapterReference strfmt.URI `json:"statsAdapterReference,omitempty"`

	// Set of URIs for stats adapters of this host
	StatsAdapterReferences []strfmt.URI `json:"statsAdapterReferences"`

	// tag links
	TagLinks []string `json:"tagLinks"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`

	// total memory bytes
	TotalMemoryBytes int64 `json:"totalMemoryBytes,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// zone Id
	ZoneID string `json:"zoneId,omitempty"`
}

// Validate validates this com vmware photon controller model resources compute service compute state
func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkInterfaceLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePowerState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatsAdapterReferences(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTagLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) validateDiskLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.DiskLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) validateGroupLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupLinks) { // not required
		return nil
	}

	return nil
}

var comVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","READY","SUSPEND","STOPPED","RETIRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeLifecycleStatePropEnum = append(comVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeLifecycleStatePropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateLifecycleStatePROVISIONING string = "PROVISIONING"
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateLifecycleStateREADY captures enum value "READY"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateLifecycleStateREADY string = "READY"
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateLifecycleStateSUSPEND captures enum value "SUSPEND"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateLifecycleStateSUSPEND string = "SUSPEND"
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateLifecycleStateSTOPPED captures enum value "STOPPED"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateLifecycleStateSTOPPED string = "STOPPED"
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateLifecycleStateRETIRED captures enum value "RETIRED"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateLifecycleStateRETIRED string = "RETIRED"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) validateLifecycleState(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleState) { // not required
		return nil
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) validateNetworkInterfaceLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkInterfaceLinks) { // not required
		return nil
	}

	return nil
}

var comVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypePowerStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ON","OFF","UNKNOWN","SUSPEND"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypePowerStatePropEnum = append(comVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypePowerStatePropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStatePowerStateON captures enum value "ON"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStatePowerStateON string = "ON"
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStatePowerStateOFF captures enum value "OFF"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStatePowerStateOFF string = "OFF"
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStatePowerStateUNKNOWN captures enum value "UNKNOWN"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStatePowerStateUNKNOWN string = "UNKNOWN"
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStatePowerStateSUSPEND captures enum value "SUSPEND"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStatePowerStateSUSPEND string = "SUSPEND"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) validatePowerStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypePowerStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) validatePowerState(formats strfmt.Registry) error {

	if swag.IsZero(m.PowerState) { // not required
		return nil
	}

	// value enum
	if err := m.validatePowerStateEnum("powerState", "body", m.PowerState); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) validateStatsAdapterReferences(formats strfmt.Registry) error {

	if swag.IsZero(m.StatsAdapterReferences) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) validateTagLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TagLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

var comVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VM_HOST","VM_GUEST","DOCKER_CONTAINER","PHYSICAL","OS_ON_PHYSICAL","ZONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeTypePropEnum = append(comVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeTypePropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeVMHOST captures enum value "VM_HOST"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeVMHOST string = "VM_HOST"
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeVMGUEST captures enum value "VM_GUEST"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeVMGUEST string = "VM_GUEST"
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeDOCKERCONTAINER captures enum value "DOCKER_CONTAINER"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeDOCKERCONTAINER string = "DOCKER_CONTAINER"
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypePHYSICAL captures enum value "PHYSICAL"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypePHYSICAL string = "PHYSICAL"
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeOSONPHYSICAL captures enum value "OS_ON_PHYSICAL"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeOSONPHYSICAL string = "OS_ON_PHYSICAL"
	// ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeZONE captures enum value "ZONE"
	ComVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeZONE string = "ZONE"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelResourcesComputeServiceComputeStateTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelResourcesComputeServiceComputeState) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelResourcesComputeServiceComputeState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
