package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwareAdmiralLogEventLogServiceEventLogState com vmware admiral log event log service event log state
// swagger:model com:vmware:admiral:log:EventLogService:EventLogState
type ComVmwareAdmiralLogEventLogServiceEventLogState struct {

	// Additional data like operation request/response body, Request IP, etc.
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// User-friendly description of the event
	Description string `json:"description,omitempty"`

	// Severity level type.
	EventLogType string `json:"eventLogType,omitempty"`

	// The operation this event originates from. Example: Host config, Registry config, Create container, Maintenance task.
	ResourceType string `json:"resourceType,omitempty"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`
}

// Validate validates this com vmware admiral log event log service event log state
func (m *ComVmwareAdmiralLogEventLogServiceEventLogState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventLogType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var comVmwareAdmiralLogEventLogServiceEventLogStateTypeEventLogTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INFO","WARNING","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareAdmiralLogEventLogServiceEventLogStateTypeEventLogTypePropEnum = append(comVmwareAdmiralLogEventLogServiceEventLogStateTypeEventLogTypePropEnum, v)
	}
}

const (
	// ComVmwareAdmiralLogEventLogServiceEventLogStateEventLogTypeINFO captures enum value "INFO"
	ComVmwareAdmiralLogEventLogServiceEventLogStateEventLogTypeINFO string = "INFO"
	// ComVmwareAdmiralLogEventLogServiceEventLogStateEventLogTypeWARNING captures enum value "WARNING"
	ComVmwareAdmiralLogEventLogServiceEventLogStateEventLogTypeWARNING string = "WARNING"
	// ComVmwareAdmiralLogEventLogServiceEventLogStateEventLogTypeERROR captures enum value "ERROR"
	ComVmwareAdmiralLogEventLogServiceEventLogStateEventLogTypeERROR string = "ERROR"
)

// prop value enum
func (m *ComVmwareAdmiralLogEventLogServiceEventLogState) validateEventLogTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareAdmiralLogEventLogServiceEventLogStateTypeEventLogTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareAdmiralLogEventLogServiceEventLogState) validateEventLogType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventLogType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventLogTypeEnum("eventLogType", "body", m.EventLogType); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwareAdmiralLogEventLogServiceEventLogState) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareAdmiralLogEventLogServiceEventLogState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareAdmiralLogEventLogServiceEventLogState) UnmarshalBinary(b []byte) error {
	var res ComVmwareAdmiralLogEventLogServiceEventLogState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
