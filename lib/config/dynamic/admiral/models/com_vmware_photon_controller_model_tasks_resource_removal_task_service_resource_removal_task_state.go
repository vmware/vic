package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskState com vmware photon controller model tasks resource removal task service resource removal task state
// swagger:model com:vmware:photon:controller:model:tasks:ResourceRemovalTaskService:ResourceRemovalTaskState
type ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskState struct {

	// error threshold
	ErrorThreshold float64 `json:"errorThreshold,omitempty"`

	// failure message
	FailureMessage string `json:"failureMessage,omitempty"`

	// is mock request
	IsMockRequest bool `json:"isMockRequest,omitempty"`

	// next page link
	NextPageLink string `json:"nextPageLink,omitempty"`

	// options
	Options []string `json:"options"`

	// resource query link
	ResourceQueryLink string `json:"resourceQueryLink,omitempty"`

	// resource query spec
	ResourceQuerySpec *ComVmwareXenonServicesCommonQueryTaskQuerySpecification `json:"resourceQuerySpec,omitempty"`

	// task info
	TaskInfo *ComVmwareXenonCommonTaskState `json:"taskInfo,omitempty"`

	// task sub stage
	TaskSubStage string `json:"taskSubStage,omitempty"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`
}

// Validate validates this com vmware photon controller model tasks resource removal task service resource removal task state
func (m *ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceQuerySpec(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskSubStage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var comVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateOptionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DOCUMENT_CHANGES_ONLY","VALIDATE_ONLY","IS_MOCK","PRESERVE_MISSING_RESOUCES","SELF_DELETE_ON_COMPLETION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateOptionsItemsEnum = append(comVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateOptionsItemsEnum, v)
	}
}

func (m *ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskState) validateOptionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateOptionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskState) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {

		// value enum
		if err := m.validateOptionsItemsEnum("options"+"."+strconv.Itoa(i), "body", m.Options[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskState) validateResourceQuerySpec(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceQuerySpec) { // not required
		return nil
	}

	if m.ResourceQuerySpec != nil {

		if err := m.ResourceQuerySpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceQuerySpec")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskState) validateTaskInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskInfo) { // not required
		return nil
	}

	if m.TaskInfo != nil {

		if err := m.TaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskInfo")
			}
			return err
		}
	}

	return nil
}

var comVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTypeTaskSubStagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WAITING_FOR_QUERY_COMPLETION","ISSUE_ADAPTER_DELETES","DELETE_DOCUMENTS","FINISHED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTypeTaskSubStagePropEnum = append(comVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTypeTaskSubStagePropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTaskSubStageWAITINGFORQUERYCOMPLETION captures enum value "WAITING_FOR_QUERY_COMPLETION"
	ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTaskSubStageWAITINGFORQUERYCOMPLETION string = "WAITING_FOR_QUERY_COMPLETION"
	// ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTaskSubStageISSUEADAPTERDELETES captures enum value "ISSUE_ADAPTER_DELETES"
	ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTaskSubStageISSUEADAPTERDELETES string = "ISSUE_ADAPTER_DELETES"
	// ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTaskSubStageDELETEDOCUMENTS captures enum value "DELETE_DOCUMENTS"
	ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTaskSubStageDELETEDOCUMENTS string = "DELETE_DOCUMENTS"
	// ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTaskSubStageFINISHED captures enum value "FINISHED"
	ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTaskSubStageFINISHED string = "FINISHED"
	// ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTaskSubStageFAILED captures enum value "FAILED"
	ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTaskSubStageFAILED string = "FAILED"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskState) validateTaskSubStageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskStateTypeTaskSubStagePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskState) validateTaskSubStage(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskSubStage) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaskSubStageEnum("taskSubStage", "body", m.TaskSubStage); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskState) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskState) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelTasksResourceRemovalTaskServiceResourceRemovalTaskState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
