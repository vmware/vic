package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfile com vmware admiral compute profile network profile service network profile
// swagger:model com:vmware:admiral:compute:profile:NetworkProfileService:NetworkProfile
type ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfile struct {

	// creation time micros
	CreationTimeMicros int64 `json:"creationTimeMicros,omitempty"`

	// custom properties
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// desc
	Desc string `json:"desc,omitempty"`

	// Link to the endpoint this profile is associated with
	EndpointLink string `json:"endpointLink,omitempty"`

	// group links
	GroupLinks []string `json:"groupLinks"`

	// id
	ID string `json:"id,omitempty"`

	// The CIDR prefix length to be used for the isolated subnets to be created (example: Subnet with CIDR 192.168.0.0/20 has CIDR prefix length: 20.
	IsolatedSubnetCIDRPrefix int64 `json:"isolatedSubnetCIDRPrefix,omitempty"`

	// CIDR of the isolation network. If not provided it will be retrieved from the isolation network itself. To be used when isolation network doesn't have a CIDR itself.
	IsolationNetworkCIDR string `json:"isolationNetworkCIDR,omitempty"`

	// Link to CIDR Allocation Service matching the provided
	IsolationNetworkCIDRAllocationLink string `json:"isolationNetworkCIDRAllocationLink,omitempty"`

	// Link to the network used for creating isolated subnets. This field should be populated only when isolation Type is SUBNET.
	IsolationNetworkLink string `json:"isolationNetworkLink,omitempty"`

	// Specifies the isolation support type e.g. none, subnet or security group
	IsolationType string `json:"isolationType,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// region Id
	RegionID string `json:"regionId,omitempty"`

	// SecurityGroupStates included in this network profile
	SecurityGroupLinks []string `json:"securityGroupLinks"`

	// SubnetStates included in this network profile
	SubnetLinks []string `json:"subnetLinks"`

	// tag links
	TagLinks []string `json:"tagLinks"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`
}

// Validate validates this com vmware admiral compute profile network profile service network profile
func (m *ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIsolationType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSecurityGroupLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnetLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTagLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfile) validateGroupLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupLinks) { // not required
		return nil
	}

	return nil
}

var comVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfileTypeIsolationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","SUBNET","SECURITY_GROUP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfileTypeIsolationTypePropEnum = append(comVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfileTypeIsolationTypePropEnum, v)
	}
}

const (
	// ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfileIsolationTypeNONE captures enum value "NONE"
	ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfileIsolationTypeNONE string = "NONE"
	// ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfileIsolationTypeSUBNET captures enum value "SUBNET"
	ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfileIsolationTypeSUBNET string = "SUBNET"
	// ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfileIsolationTypeSECURITYGROUP captures enum value "SECURITY_GROUP"
	ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfileIsolationTypeSECURITYGROUP string = "SECURITY_GROUP"
)

// prop value enum
func (m *ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfile) validateIsolationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfileTypeIsolationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfile) validateIsolationType(formats strfmt.Registry) error {

	if swag.IsZero(m.IsolationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIsolationTypeEnum("isolationType", "body", m.IsolationType); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfile) validateSecurityGroupLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityGroupLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfile) validateSubnetLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.SubnetLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfile) validateTagLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TagLinks) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfile) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfile) UnmarshalBinary(b []byte) error {
	var res ComVmwareAdmiralComputeProfileNetworkProfileServiceNetworkProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
