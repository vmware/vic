package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ComVmwarePhotonControllerModelResourcesFirewallServiceFirewallStateAllow com vmware photon controller model resources firewall service firewall state allow
// swagger:model com:vmware:photon:controller:model:resources:FirewallService:FirewallState:Allow
type ComVmwarePhotonControllerModelResourcesFirewallServiceFirewallStateAllow struct {

	// ip range
	IPRange string `json:"ipRange,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ports
	Ports []string `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this com vmware photon controller model resources firewall service firewall state allow
func (m *ComVmwarePhotonControllerModelResourcesFirewallServiceFirewallStateAllow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelResourcesFirewallServiceFirewallStateAllow) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelResourcesFirewallServiceFirewallStateAllow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelResourcesFirewallServiceFirewallStateAllow) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelResourcesFirewallServiceFirewallStateAllow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
