package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskState com vmware photon controller model tasks image enumeration task service image enumeration task state
// swagger:model com:vmware:photon:controller:model:tasks:ImageEnumerationTaskService:ImageEnumerationTaskState
type ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskState struct {

	// Custom properties associated with the task.
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// Optional link of the end-point for which private (specific just for this endpoint) images enumeration should be triggered. Set either this property or endpointType.
	EndpointLink string `json:"endpointLink,omitempty"`

	// Optional type of the end-points for which public (global for all endpoints of this type) images enumeration should be triggered. Set either this property or endpointLink.
	EndpointType string `json:"endpointType,omitempty"`

	// Optional type of image enumeration: start, stop, refresh.
	EnumerationAction string `json:"enumerationAction,omitempty"`

	// failure message
	FailureMessage string `json:"failureMessage,omitempty"`

	// filter
	Filter string `json:"filter,omitempty"`

	// Options used to configure specific aspects of this task execution.
	Options []string `json:"options"`

	// Optional identifier of the region for which public images enumeration should be triggered. Only applicable with endpointType property.
	RegionID string `json:"regionId,omitempty"`

	// task info
	TaskInfo *ComVmwareXenonCommonTaskState `json:"taskInfo,omitempty"`

	// Optional list of tenants that can access this task.
	TenantLinks []string `json:"tenantLinks"`
}

// Validate validates this com vmware photon controller model tasks image enumeration task service image enumeration task state
func (m *ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnumerationAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var comVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateTypeEnumerationActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["START","STOP","REFRESH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateTypeEnumerationActionPropEnum = append(comVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateTypeEnumerationActionPropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateEnumerationActionSTART captures enum value "START"
	ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateEnumerationActionSTART string = "START"
	// ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateEnumerationActionSTOP captures enum value "STOP"
	ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateEnumerationActionSTOP string = "STOP"
	// ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateEnumerationActionREFRESH captures enum value "REFRESH"
	ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateEnumerationActionREFRESH string = "REFRESH"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskState) validateEnumerationActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateTypeEnumerationActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskState) validateEnumerationAction(formats strfmt.Registry) error {

	if swag.IsZero(m.EnumerationAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnumerationActionEnum("enumerationAction", "body", m.EnumerationAction); err != nil {
		return err
	}

	return nil
}

var comVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateOptionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DOCUMENT_CHANGES_ONLY","VALIDATE_ONLY","IS_MOCK","PRESERVE_MISSING_RESOUCES","SELF_DELETE_ON_COMPLETION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateOptionsItemsEnum = append(comVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateOptionsItemsEnum, v)
	}
}

func (m *ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskState) validateOptionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskStateOptionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskState) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {

		// value enum
		if err := m.validateOptionsItemsEnum("options"+"."+strconv.Itoa(i), "body", m.Options[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskState) validateTaskInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskInfo) { // not required
		return nil
	}

	if m.TaskInfo != nil {

		if err := m.TaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskState) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskState) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelTasksImageEnumerationTaskServiceImageEnumerationTaskState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
