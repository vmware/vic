package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ComVmwarePhotonControllerModelTasksMonitoringSingleResourceStatsAggregationTaskServiceSingleResourceStatsAggregationTaskState com vmware photon controller model tasks monitoring single resource stats aggregation task service single resource stats aggregation task state
// swagger:model com:vmware:photon:controller:model:tasks:monitoring:SingleResourceStatsAggregationTaskService:SingleResourceStatsAggregationTaskState
type ComVmwarePhotonControllerModelTasksMonitoringSingleResourceStatsAggregationTaskServiceSingleResourceStatsAggregationTaskState struct {

	// Aggregation type per metric name
	Aggregations map[string]string `json:"aggregations,omitempty"`

	// failure message
	FailureMessage string `json:"failureMessage,omitempty"`

	// Metrics to be aggregated on latest value only
	LatestValueOnly []string `json:"latestValueOnly"`

	// The set of metric names to aggregate on
	MetricNames []string `json:"metricNames"`

	// Task to patch back to
	ParentTaskReference strfmt.URI `json:"parentTaskReference,omitempty"`

	// The query to lookup resources for stats aggregation. If no query is specified, the aggregation is performed on the resource identified by the resourceLink parameter
	Query *ComVmwareXenonServicesCommonQueryTaskQuery `json:"query,omitempty"`

	// Resource to invoke stats aggregation on
	ResourceLink string `json:"resourceLink,omitempty"`

	// task info
	TaskInfo *ComVmwareXenonCommonTaskState `json:"taskInfo,omitempty"`
}

// Validate validates this com vmware photon controller model tasks monitoring single resource stats aggregation task service single resource stats aggregation task state
func (m *ComVmwarePhotonControllerModelTasksMonitoringSingleResourceStatsAggregationTaskServiceSingleResourceStatsAggregationTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLatestValueOnly(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMetricNames(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelTasksMonitoringSingleResourceStatsAggregationTaskServiceSingleResourceStatsAggregationTaskState) validateLatestValueOnly(formats strfmt.Registry) error {

	if swag.IsZero(m.LatestValueOnly) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksMonitoringSingleResourceStatsAggregationTaskServiceSingleResourceStatsAggregationTaskState) validateMetricNames(formats strfmt.Registry) error {

	if swag.IsZero(m.MetricNames) { // not required
		return nil
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksMonitoringSingleResourceStatsAggregationTaskServiceSingleResourceStatsAggregationTaskState) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(m.Query) { // not required
		return nil
	}

	if m.Query != nil {

		if err := m.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksMonitoringSingleResourceStatsAggregationTaskServiceSingleResourceStatsAggregationTaskState) validateTaskInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskInfo) { // not required
		return nil
	}

	if m.TaskInfo != nil {

		if err := m.TaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksMonitoringSingleResourceStatsAggregationTaskServiceSingleResourceStatsAggregationTaskState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksMonitoringSingleResourceStatsAggregationTaskServiceSingleResourceStatsAggregationTaskState) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelTasksMonitoringSingleResourceStatsAggregationTaskServiceSingleResourceStatsAggregationTaskState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
