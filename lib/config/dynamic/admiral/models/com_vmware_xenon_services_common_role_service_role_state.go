package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwareXenonServicesCommonRoleServiceRoleState com vmware xenon services common role service role state
// swagger:model com:vmware:xenon:services:common:RoleService:RoleState
type ComVmwareXenonServicesCommonRoleServiceRoleState struct {

	// policy
	Policy string `json:"policy,omitempty"`

	// priority
	Priority int64 `json:"priority,omitempty"`

	// resource group link
	ResourceGroupLink string `json:"resourceGroupLink,omitempty"`

	// user group link
	UserGroupLink string `json:"userGroupLink,omitempty"`

	// verbs
	Verbs []string `json:"verbs"`
}

// Validate validates this com vmware xenon services common role service role state
func (m *ComVmwareXenonServicesCommonRoleServiceRoleState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVerbs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var comVmwareXenonServicesCommonRoleServiceRoleStateTypePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALLOW","DENY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareXenonServicesCommonRoleServiceRoleStateTypePolicyPropEnum = append(comVmwareXenonServicesCommonRoleServiceRoleStateTypePolicyPropEnum, v)
	}
}

const (
	// ComVmwareXenonServicesCommonRoleServiceRoleStatePolicyALLOW captures enum value "ALLOW"
	ComVmwareXenonServicesCommonRoleServiceRoleStatePolicyALLOW string = "ALLOW"
	// ComVmwareXenonServicesCommonRoleServiceRoleStatePolicyDENY captures enum value "DENY"
	ComVmwareXenonServicesCommonRoleServiceRoleStatePolicyDENY string = "DENY"
)

// prop value enum
func (m *ComVmwareXenonServicesCommonRoleServiceRoleState) validatePolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareXenonServicesCommonRoleServiceRoleStateTypePolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareXenonServicesCommonRoleServiceRoleState) validatePolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	// value enum
	if err := m.validatePolicyEnum("policy", "body", m.Policy); err != nil {
		return err
	}

	return nil
}

var comVmwareXenonServicesCommonRoleServiceRoleStateVerbsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GET","POST","PATCH","PUT","DELETE","OPTIONS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareXenonServicesCommonRoleServiceRoleStateVerbsItemsEnum = append(comVmwareXenonServicesCommonRoleServiceRoleStateVerbsItemsEnum, v)
	}
}

func (m *ComVmwareXenonServicesCommonRoleServiceRoleState) validateVerbsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareXenonServicesCommonRoleServiceRoleStateVerbsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareXenonServicesCommonRoleServiceRoleState) validateVerbs(formats strfmt.Registry) error {

	if swag.IsZero(m.Verbs) { // not required
		return nil
	}

	for i := 0; i < len(m.Verbs); i++ {

		// value enum
		if err := m.validateVerbsItemsEnum("verbs"+"."+strconv.Itoa(i), "body", m.Verbs[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareXenonServicesCommonRoleServiceRoleState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareXenonServicesCommonRoleServiceRoleState) UnmarshalBinary(b []byte) error {
	var res ComVmwareXenonServicesCommonRoleServiceRoleState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
