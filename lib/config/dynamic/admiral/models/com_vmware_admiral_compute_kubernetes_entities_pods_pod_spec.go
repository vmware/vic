package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpec com vmware admiral compute kubernetes entities pods pod spec
// swagger:model com:vmware:admiral:compute:kubernetes:entities:pods:PodSpec
type ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpec struct {

	// active deadline seconds
	ActiveDeadlineSeconds int64 `json:"activeDeadlineSeconds,omitempty"`

	// containers
	Containers []*ComVmwareAdmiralComputeKubernetesEntitiesPodsContainer `json:"containers"`

	// dns policy
	DNSPolicy string `json:"dnsPolicy,omitempty"`

	// host IP c
	HostIPC bool `json:"hostIPC,omitempty"`

	// host network
	HostNetwork string `json:"hostNetwork,omitempty"`

	// host p ID
	HostPID bool `json:"hostPID,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// node name
	NodeName string `json:"nodeName,omitempty"`

	// node selector
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`

	// restart policy
	RestartPolicy string `json:"restartPolicy,omitempty"`

	// security context
	SecurityContext *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSecurityContext `json:"securityContext,omitempty"`

	// subdomain
	Subdomain string `json:"subdomain,omitempty"`

	// termination grace period seconds
	TerminationGracePeriodSeconds int64 `json:"terminationGracePeriodSeconds,omitempty"`

	// volumes
	Volumes []*ComVmwareAdmiralComputeKubernetesEntitiesVolumesVolume `json:"volumes"`
}

// Validate validates this com vmware admiral compute kubernetes entities pods pod spec
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDNSPolicy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRestartPolicy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSecurityContext(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpec) validateContainers(formats strfmt.Registry) error {

	if swag.IsZero(m.Containers) { // not required
		return nil
	}

	for i := 0; i < len(m.Containers); i++ {

		if swag.IsZero(m.Containers[i]) { // not required
			continue
		}

		if m.Containers[i] != nil {

			if err := m.Containers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("containers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var comVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecTypeDNSPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ClusterFirst","Default"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecTypeDNSPolicyPropEnum = append(comVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecTypeDNSPolicyPropEnum, v)
	}
}

const (
	// ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecDNSPolicyClusterFirst captures enum value "ClusterFirst"
	ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecDNSPolicyClusterFirst string = "ClusterFirst"
	// ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecDNSPolicyDefault captures enum value "Default"
	ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecDNSPolicyDefault string = "Default"
)

// prop value enum
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpec) validateDNSPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecTypeDNSPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpec) validateDNSPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateDNSPolicyEnum("dnsPolicy", "body", m.DNSPolicy); err != nil {
		return err
	}

	return nil
}

var comVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecTypeRestartPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Always","OnFailure","Never"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecTypeRestartPolicyPropEnum = append(comVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecTypeRestartPolicyPropEnum, v)
	}
}

const (
	// ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecRestartPolicyAlways captures enum value "Always"
	ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecRestartPolicyAlways string = "Always"
	// ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecRestartPolicyOnFailure captures enum value "OnFailure"
	ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecRestartPolicyOnFailure string = "OnFailure"
	// ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecRestartPolicyNever captures enum value "Never"
	ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecRestartPolicyNever string = "Never"
)

// prop value enum
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpec) validateRestartPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwareAdmiralComputeKubernetesEntitiesPodsPodSpecTypeRestartPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpec) validateRestartPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.RestartPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateRestartPolicyEnum("restartPolicy", "body", m.RestartPolicy); err != nil {
		return err
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpec) validateSecurityContext(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityContext) { // not required
		return nil
	}

	if m.SecurityContext != nil {

		if err := m.SecurityContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityContext")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpec) validateVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	for i := 0; i < len(m.Volumes); i++ {

		if swag.IsZero(m.Volumes[i]) { // not required
			continue
		}

		if m.Volumes[i] != nil {

			if err := m.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpec) UnmarshalBinary(b []byte) error {
	var res ComVmwareAdmiralComputeKubernetesEntitiesPodsPodSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
