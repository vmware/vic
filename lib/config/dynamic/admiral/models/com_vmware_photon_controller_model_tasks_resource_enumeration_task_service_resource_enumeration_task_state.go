package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskState com vmware photon controller model tasks resource enumeration task service resource enumeration task state
// swagger:model com:vmware:photon:controller:model:tasks:ResourceEnumerationTaskService:ResourceEnumerationTaskState
type ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskState struct {

	// adapter management reference
	AdapterManagementReference strfmt.URI `json:"adapterManagementReference,omitempty"`

	// endpoint link
	EndpointLink string `json:"endpointLink,omitempty"`

	// enumeration action
	EnumerationAction string `json:"enumerationAction,omitempty"`

	// failure message
	FailureMessage string `json:"failureMessage,omitempty"`

	// options
	Options []string `json:"options"`

	// parent compute link
	ParentComputeLink string `json:"parentComputeLink,omitempty"`

	// resource pool link
	ResourcePoolLink string `json:"resourcePoolLink,omitempty"`

	// task info
	TaskInfo *ComVmwareXenonCommonTaskState `json:"taskInfo,omitempty"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`
}

// Validate validates this com vmware photon controller model tasks resource enumeration task service resource enumeration task state
func (m *ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnumerationAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var comVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateTypeEnumerationActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["START","STOP","REFRESH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateTypeEnumerationActionPropEnum = append(comVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateTypeEnumerationActionPropEnum, v)
	}
}

const (
	// ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateEnumerationActionSTART captures enum value "START"
	ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateEnumerationActionSTART string = "START"
	// ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateEnumerationActionSTOP captures enum value "STOP"
	ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateEnumerationActionSTOP string = "STOP"
	// ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateEnumerationActionREFRESH captures enum value "REFRESH"
	ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateEnumerationActionREFRESH string = "REFRESH"
)

// prop value enum
func (m *ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskState) validateEnumerationActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateTypeEnumerationActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskState) validateEnumerationAction(formats strfmt.Registry) error {

	if swag.IsZero(m.EnumerationAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnumerationActionEnum("enumerationAction", "body", m.EnumerationAction); err != nil {
		return err
	}

	return nil
}

var comVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateOptionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DOCUMENT_CHANGES_ONLY","VALIDATE_ONLY","IS_MOCK","PRESERVE_MISSING_RESOUCES","SELF_DELETE_ON_COMPLETION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		comVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateOptionsItemsEnum = append(comVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateOptionsItemsEnum, v)
	}
}

func (m *ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskState) validateOptionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, comVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskStateOptionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskState) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {

		// value enum
		if err := m.validateOptionsItemsEnum("options"+"."+strconv.Itoa(i), "body", m.Options[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskState) validateTaskInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskInfo) { // not required
		return nil
	}

	if m.TaskInfo != nil {

		if err := m.TaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskState) validateTenantLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantLinks) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskState) UnmarshalBinary(b []byte) error {
	var res ComVmwarePhotonControllerModelTasksResourceEnumerationTaskServiceResourceEnumerationTaskState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
