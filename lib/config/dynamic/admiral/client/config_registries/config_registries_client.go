package config_registries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new config registries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for config registries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetConfigRegistries get config registries API
*/
func (a *Client) GetConfigRegistries(params *GetConfigRegistriesParams) (*GetConfigRegistriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigRegistriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetConfigRegistries",
		Method:             "GET",
		PathPattern:        "/config/registries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigRegistriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConfigRegistriesOK), nil

}

/*
GetConfigRegistriesID get config registries ID API
*/
func (a *Client) GetConfigRegistriesID(params *GetConfigRegistriesIDParams) (*GetConfigRegistriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigRegistriesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetConfigRegistriesID",
		Method:             "GET",
		PathPattern:        "/config/registries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigRegistriesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConfigRegistriesIDOK), nil

}

/*
PatchConfigRegistriesID patch config registries ID API
*/
func (a *Client) PatchConfigRegistriesID(params *PatchConfigRegistriesIDParams) (*PatchConfigRegistriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchConfigRegistriesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchConfigRegistriesID",
		Method:             "PATCH",
		PathPattern:        "/config/registries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchConfigRegistriesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchConfigRegistriesIDOK), nil

}

/*
PostConfigRegistries post config registries API
*/
func (a *Client) PostConfigRegistries(params *PostConfigRegistriesParams) (*PostConfigRegistriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostConfigRegistriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostConfigRegistries",
		Method:             "POST",
		PathPattern:        "/config/registries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostConfigRegistriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostConfigRegistriesOK), nil

}

/*
PostConfigRegistriesID post config registries ID API
*/
func (a *Client) PostConfigRegistriesID(params *PostConfigRegistriesIDParams) (*PostConfigRegistriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostConfigRegistriesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostConfigRegistriesID",
		Method:             "POST",
		PathPattern:        "/config/registries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostConfigRegistriesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostConfigRegistriesIDOK), nil

}

/*
PutConfigRegistriesID put config registries ID API
*/
func (a *Client) PutConfigRegistriesID(params *PutConfigRegistriesIDParams) (*PutConfigRegistriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutConfigRegistriesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutConfigRegistriesID",
		Method:             "PUT",
		PathPattern:        "/config/registries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutConfigRegistriesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutConfigRegistriesIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
