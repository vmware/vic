package resources_compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new resources compute API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resources compute API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetResourcesCompute get resources compute API
*/
func (a *Client) GetResourcesCompute(params *GetResourcesComputeParams) (*GetResourcesComputeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesComputeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetResourcesCompute",
		Method:             "GET",
		PathPattern:        "/resources/compute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourcesComputeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResourcesComputeOK), nil

}

/*
GetResourcesComputeID get resources compute ID API
*/
func (a *Client) GetResourcesComputeID(params *GetResourcesComputeIDParams) (*GetResourcesComputeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesComputeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetResourcesComputeID",
		Method:             "GET",
		PathPattern:        "/resources/compute/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourcesComputeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResourcesComputeIDOK), nil

}

/*
PatchResourcesComputeID patch resources compute ID API
*/
func (a *Client) PatchResourcesComputeID(params *PatchResourcesComputeIDParams) (*PatchResourcesComputeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchResourcesComputeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchResourcesComputeID",
		Method:             "PATCH",
		PathPattern:        "/resources/compute/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchResourcesComputeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchResourcesComputeIDOK), nil

}

/*
PostResourcesCompute post resources compute API
*/
func (a *Client) PostResourcesCompute(params *PostResourcesComputeParams) (*PostResourcesComputeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostResourcesComputeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostResourcesCompute",
		Method:             "POST",
		PathPattern:        "/resources/compute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostResourcesComputeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostResourcesComputeOK), nil

}

/*
PostResourcesComputeID post resources compute ID API
*/
func (a *Client) PostResourcesComputeID(params *PostResourcesComputeIDParams) (*PostResourcesComputeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostResourcesComputeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostResourcesComputeID",
		Method:             "POST",
		PathPattern:        "/resources/compute/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostResourcesComputeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostResourcesComputeIDOK), nil

}

/*
PutResourcesComputeID put resources compute ID API
*/
func (a *Client) PutResourcesComputeID(params *PutResourcesComputeIDParams) (*PutResourcesComputeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutResourcesComputeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutResourcesComputeID",
		Method:             "PUT",
		PathPattern:        "/resources/compute/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutResourcesComputeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutResourcesComputeIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
