# Copyright 2016 VMware, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

swagger: "2.0"
info:
  description: "Port Layer API"
  title: "Port Layer API"
  version: "v0.0.1"
produces:
- application/json
consumes:
- application/json
schemes:
- http
paths:
  /_ping:
    get:
      description: "Pings the server to see if it's running"
      summary: "ping the portlayer server"
      tags: ["misc"]
      operationId: Ping
      produces:
        - text/plain
      responses:
        '200':
          description: "OK"
          schema:
            type: string
  /storage:
    post:
      description: "Creates a location to store images"
      summary: "creates an image store"
      tags: ["storage"]
      operationId: CreateImageStore
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/ImageStore"
      responses:
        '201':
          description: "Created"
          schema:
            $ref: "#/definitions/StoreUrl"
        '409':
          description: "An image store with that name already exists."
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "error"
          schema:
            $ref: "#/definitions/Error"
  /storage/{store_name}:
    get:
      description: "Retrieves a list of images given a list of image IDs, or all images in the image store if no param is passed."
      summary: "Retrieve a list of images in an image store"
      tags: ["storage"]
      operationId: ListImages
      parameters:
        - name: store_name
          type: string
          in: path
          required: true
        - name: ids
          type: string
          in: query
          type: array
          items:
            type: string
            collectionFormat: csv
      responses:
        '200':
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/Image"
        '404':
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "error"
          schema:
           $ref: "#/definitions/Error"
    post:
      description: "Creates a new image layer in an image store"
      summary: "Creates a new image layer"
      tags: ["storage"]
      operationId: WriteImage
      consumes:
        - application/octet-stream
      parameters:
        - name: image_file
          in: body
          schema:
            type: string
            format: binary
        - name: store_name
          type: string
          in: path
          required: true
        - name: image_id
          type: string
          in: query
          required: true
        - name: parent_id
          type: string
          in: query
          required: true
        - name: sum
          type: string
          in: query
          required: true
        - name: metadatakey
          type: string
          in: query
        - name: metadataval
          type: string
          in: query
      responses:
        '201':
          description: "Created"
          schema:
            $ref: "#/definitions/Image"
        default:
          description: "error"
          schema:
           $ref: "#/definitions/Error"
  /storage/{store_name}/info/{id}:
    get:
      description: "Inspect an image by id in an image store"
      summary: "Inspect an image"
      tags: ["storage"]
      operationId: GetImage
      parameters:
        - name: store_name
          type: string
          in: path
          required: true
        - name: id
          type: string
          in: path
          required: true
      responses:
        '404':
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
          schema:
            $ref: "#/definitions/Image"
        default:
          description: "error"
          schema:
            $ref: "#/definitions/Error"
  /storage/{store_name}/tar/{id}:
    get:
      description: "Get an image by id in an image store as a tar file"
      summary: "Get an image as a tar file"
      tags: ["storage"]
      operationId: GetImageTar
      parameters:
        - name: store_name
          type: string
          in: path
          required: true
        - name: id
          type: string
          in: path
          required: true
      responses:
        '404':
          description: "Not found"
        '200':
          description: "OK"
          schema:
            type: string
            format: binary
        default:
          description: "error"
          schema:
            $ref: "#/definitions/Error"
  /storage/volumes/:
    get:
      description: "Get a list of available volumes"
      operationId: ListVolumes
      tags: ["storage"]
      consumes:
        - application/json
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - name: id
          type: string
          in: query
          type: array
          items:
            type: string
            collectionFormat: csv
      responses:
        '200':
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/VolumeResponse"
        '404':
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "error"
          schema:
           $ref: "#/definitions/Error"
    post:
      description: "Create a volume"
      operationId: CreateVolume
      summary: "Creates a Volume with metadata that is provided from the personality"
      tags: ["storage"]
      consumes:
        - application/json
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - name: VolumeRequest
          required: true
          in: body
          schema:
            $ref: "#/definitions/VolumeRequest"
      responses:
        '201':
          description: "Created"
          schema:
            $ref: "#/definitions/VolumeResponse"
        '500':
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "error"
          schema:
           $ref: "#/definitions/Error"
  /storage/volumes/{name}:
    get:
      description: "Get a Volume Handle"
      operationId: GetVolume
      tags: ["storage"]
      consumes:
        - application/json
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - name: name
          required: true
          in: path
          type: string
      responses:
        '404':
          description: "Volume not found"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
          schema:
            type: string
    delete:
      summary: "Remove a volume"
      tags: ["storage"]
      operationId: RemoveVolume
      parameters:
        - name: name
          type: string
          in: path
          required: true
      responses:
        '200':
          description: "Volume successfully removed"
          schema:
            $ref: "#/definitions/Error"
        '404':
          description: "Volume not found"
          schema:
            $ref: "#/definitions/Error"
        '409':
          description: "Volume in use"
          schema:
            $ref: "#/definitions/Error"
        '500':
          description: "Server Error"
          schema:
            $ref: "#/definitions/Error"
    post:
      description: "Attach a volume to a container"
      operationId: VolumeJoin
      tags: ["storage"]
      consumes:
        - application/json
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - name: name
          required: true
          type: string
          in: path
        - name: JoinArgs
          in: body
          required: true
          schema:
            $ref: "#/definitions/VolumeJoinConfig"
      responses:
        '200':
          description: "OK"
          schema:
            type: string
        '500':
          description: "ServerError"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "error"
          schema:
            $ref: "#/definitions/Error"
  /scopes:
    post:
      summary: "Create a new scope"
      tags: ["scopes"]
      operationId: CreateScope
      parameters:
        - name: config
          in: body
          schema:
            $ref: "#/definitions/ScopeConfig"
      responses:
        '201':
          description: "Created"
          schema:
            $ref: "#/definitions/ScopeConfig"
        '409':
          description: "A scope with that name exists."
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "error"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags: ["scopes"]
      operationId: ListAll
      responses:
        '200':
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/ScopeConfig"
        default:
          description: "error"
          schema:
            $ref: "#/definitions/Error"
  /scopes/{idName}:
    get:
      tags: ["scopes"]
      operationId: List
      parameters:
        - name: idName
          type: string
          in: path
          required: true
      responses:
        '200':
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/ScopeConfig"
        '404':
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags: ["scopes"]
      operationId: DeleteScope
      parameters:
        - name: idName
          type: string
          in: path
          required: true
      responses:
        '200':
          description: "OK"
        '404':
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        '500':
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /scopes/{scope}/containers:
    post:
      description: "Add a container to scopes modifying the conatiner VM's config as necessary"
      tags: ["scopes"]
      operationId: AddContainer
      parameters:
        - name: scope
          required: true
          in: path
          type: string
        - name: config
          in: body
          schema:
            $ref: "#/definitions/ScopesAddContainerConfig"
          required: true
      responses:
        '200':
          description: "OK"
          schema:
            type: string
        '404':
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        '500':
          description: "error"
          schema:
            $ref: "#/definitions/Error"
  /scopes/{scope}/containers/{handle}:
    delete:
      description: "Remove a container from a scope"
      tags: ["scopes"]
      operationId: RemoveContainer
      parameters:
        - name: handle
          required: true
          in: path
          type: string
        - name: scope
          in: path
          required: true
          type: string
      responses:
        '200':
          description: "OK"
          schema:
            type: string
        '404':
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        '500':
          description: "error"
          schema:
            $ref: "#/definitions/Error"
  /scopes/containers/{handle}/binding:
    post:
      tags: ["scopes"]
      description: "Perform scope initialization for each of the scopes the container belongs to. Network initialization may include, for example, assigning addresses on a scope."
      operationId: BindContainer
      consumes:
        - application/octet-stream
        - application/json
      produces:
        - application/json
      parameters:
        - name: handle
          required: true
          in: path
          type: string
      responses:
        '200':
          description: "OK"
          schema:
            type: string
        '404':
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        '500':
          description: "error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags: ["scopes"]
      operationId: UnbindContainer
      consumes:
        - application/octet-stream
        - application/json
      produces:
        - application/json
      parameters:
        - name: handle
          required: true
          in: path
          type: string
      responses:
        '200':
          description: "OK"
          schema:
            type: string
        '404':
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"
        '500':
          description: "error"
          schema:
            $ref: "#/definitions/Error"
  /containers:
    post:
      description: "Initiates a container create operation"
      summary: "Initiates a container create operation"
      operationId: Create
      tags: ["containers"]
      consumes:
        - application/json
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - name: name
          in: query
          type: string
          pattern: "/?[a-zA-Z0-9_-]+"
        - name: createConfig
          in: body
          required: true
          schema:
            $ref: "#/definitions/ContainerCreateConfig"
      responses:
        '404':
          description: "Create failed"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
          schema:
            $ref: "#/definitions/ContainerCreatedInfo"
  /containers/info/{id}:
    get:
      description: "Gets information about a container by id"
      operationId: GetContainerInfo
      tags: ["containers"]
      consumes:
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - name: id
          required: true
          in: path
          type: string
      responses:
        '500':
          description: "server error"
          schema:
            $ref: "#/definitions/Error"
        '404':
          description: "not found"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
          schema:
            $ref: "#/definitions/ContainerInfo"
  /containers/list:
    get:
      description: "Gets a list of all containers"
      operationId: GetContainerList
      tags: ["containers"]
      consumes:
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - name: all
          required: false
          in: query
          type: boolean
      responses:
        '500':
          description: "server error"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#definitions/ContainerListInfo"
  /containers/{id}:
    get:
      description: "Get a container handle"
      operationId: Get
      tags: ["containers"]
      consumes:
        - application/json
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - name: id
          required: true
          in: path
          type: string
      responses:
        '404':
          description: "not found"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
          schema:
            type: string
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      description: "Remove a container from existence"
      operationId: ContainerRemove
      tags: ["containers"]
      consumes:
        - application/octet-stream
      parameters:
        - name: id
          required: true
          in: path
          type: string
      responses:
        '200':
          description: "OK"
        '400':
          description: "bad parameter"
        '404':
          description: "no such container"
        '500':
          description: "server error"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
  /containers/{handle}:
    put:
      description: "Commit and close a container handle"
      operationId: Commit
      tags: ["containers"]
      consumes:
        - application/json
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - name: handle
          in: path
          required: true
          type: string
      responses:
        '404':
          description: "not found"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
  /containers/{handle}/state:
    put:
      description: "Changes the state of a container"
      operationId: StateChange
      tags: ["containers"]
      consumes:
        - application/octet-stream
        - application/json
      produces:
        - application/json
      parameters:
        - name: handle
          required: true
          in: path
          type: string
        - name: state
          required: true
          in: body
          schema:
            type: string
            enum: ["RUNNING", "STOPPED"]
      responses:
        '404':
          description: "not found"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
          schema:
            type: string
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
    get:
      description: "Get the current state of the a container"
      operationId: GetState
      tags: ["containers"]
      consumes:
        - application/octet-stream
        - application/json
      produces:
        - application/json
      parameters:
        - name: handle
          required: true
          in: path
          type: string
      responses:
        '404':
          description: "not found"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
          schema:
            $ref: "#/definitions/ContainerGetStateResponse"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
  /interaction/{id}/resize:
    post:
      description: "Resize the container's tty session"
      summary: "Resize tty session"
      operationId: ContainerResize
      tags: ["interaction"]
      consumes:
        - application/octet-stream
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          type: string
          required: true
        - name: height
          in: query
          type: integer
          format: int32
          required: true
        - name: width
          in: query
          type: integer
          format: int32
          required: true
      responses:
        '500':
          description: "Container resize failed"
          schema:
            $ref: "#/definitions/Error"
        '404':
          description: "Container not found"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
  /interaction/{id}/stdin:
    post:
      description: "Set a stdin for the container"
      summary: "Set stdin"
      operationId: ContainerSetStdin
      tags: ["interaction"]
      consumes:
        - application/raw-stream
        # - application/json
      parameters:
        - name: id
          in: path
          type: string
          required: true
        - name: deadline
          in: query
          type: string
          format: datetime
        - name: raw_stream
          in: body
          schema:
            type: string
            format: binary
      responses:
        '500':
          description: "Failed to Set stdin"
          schema:
            $ref: "#/definitions/Error"
        '404':
          description: "Container not found"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
  /interaction/{id}/stdout:
    get:
      description: "Get a stdout for the container"
      summary: "Get stdout"
      operationId: ContainerGetStdout
      tags: ["interaction"]
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      parameters:
        - name: id
          in: path
          type: string
          required: true
        - name: deadline
          in: query
          type: string
          format: datetime
      responses:
        '500':
          description: "Failed to get stdout"
          schema:
            $ref: "#/definitions/Error"
        '404':
          description: "Container not found"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
          schema:
            format: binary
  /interaction/{id}/stderr:
    get:
      description: "Get a stderr for the container"
      summary: "Get stderr"
      operationId: ContainerGetStderr
      tags: ["interaction"]
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      parameters:
        - name: id
          in: path
          type: string
          required: true
        - name: deadline
          in: query
          type: string
          format: datetime
      responses:
        '500':
          description: "Failed to get stderr"
          schema:
            $ref: "#/definitions/Error"
        '404':
          description: "Container not found"
          schema:
            $ref: "#/definitions/Error"
        '200':
          description: "OK"
          schema:
            format: binary
definitions:
  Error:
    type: object
    required:
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
  StoreUrl:
    type: object
    required:
      - url
    properties:
      code:
        type: integer
        format: int64
      url:
        type: string
  ImageStore:
    type: object
    required:
      - name
    properties:
      name:
        type: string
  Image:
    type: object
    required:
      - ID
      - Store
    properties:
      ID:
        type: string
      SelfLink:
        type: string
      Parent:
        type: string
      Store:
        type: string
      Metadata:
        type: object
        additionalProperties:
                type: string
  ScopeConfig:
    type: object
    required:
      - name
      - scopeType
    properties:
      id:
        type: string
      name:
        type: string
      scopeType:
        type: string
      subnet:
        type: string
      gateway:
        type: string
      dns:
        type: array
        items:
          type: string
      ipam:
        type: array
        items:
          type: string
      endpoints:
        type: array
        items:
          $ref: "#/definitions/EndpointConfig"
  EndpointConfig:
    type: object
    required:
      - id
      - name
      - network
      - address
      - gateway
      - container
    properties:
      id:
        type: string
      name:
        type: string
      network:
        type: string
      address:
        type: string
      gateway:
        type: string
      container:
        type: string
  ContainerCreateConfig:
    type: object
    properties:
      name:
        type: string
      imageStore:
        $ref: "#/definitions/ImageStore"
      image:
        type: string
      repoName:
        type: string
      path:
        type: string
      args:
        type: array
        items:
          type: string
      workingDir:
        type: string
      env:
        type: array
        items:
          type: string
      networkDisabled:
        type: boolean
      tty:
        type: boolean
        default: false
  ContainerCreatedInfo:
    type: object
    required:
      - handle
      - id
    properties:
      handle:
        type: string
      id:
        type: string
  ScopesAddContainerConfig:
    type: object
    required:
      - networkConfig
      - handle
    properties:
      networkConfig:
        $ref: "#/definitions/NetworkConfig"
      handle:
        type: string
  NetworkConfig:
    type: object
    required:
      - networkName
    properties:
      networkName:
        type: string
      address:
        type: string
      aliases:
        type: array
        items:
          type: string
  ContainerGetStateResponse:
    type: object
    required:
      - handle
      - state
    properties:
      handle:
        type: string
      state:
        type: string
        enum: ["RUNNING", "STOPPED"]
  VolumeRequest:
    type: object
    required:
      - Name
      - Store
      - Capacity
      - Driver
    properties:
      Name:
        type: string
      Driver:
        type: string
      DriverArgs:
        type: object
        additionalProperties:
          type: string
      Store:
        type: string
      Capacity:
        type: integer
        format: int64
      Metadata:
        type: object
        additionalProperties:
          type: string
  VolumeResponse:
    type: object
    required:
      - Name
      - Label
      - Store
      - Driver
    properties:
      Name:
        type: string
      Label:
        type: string
      Driver:
        type: string
      Store:
        type: string
      Metadata:
        type: object
        additionalProperties:
          type: string
  VolumeJoinConfig:
    type: object
    required:
      - Handle
      - MountPath
      - Flags
    properties:
      Handle:
        type: string
      MountPath:
        type: string
      Flags:
        type: object
        additionalProperties:
          type: string


  # The following definitions are definitions used to get container information
  ContainerInfo:
    type: object
    properties:
      containerConfig:
        $ref: "#/definitions/ContainerConfig"
      HostConfig:
        $ref: "#/definitions/HostConfig"
      processConfig:
        $ref: "#/definitions/ProcessConfig"
      volumeConfig:
        type: array
        items:
          $ref: "#/definitions/VolumeConfig"
      scopeConfig:
        type: array
        items:
          $ref: "#/definitions/ScopeConfig"
  ContainerListInfo:
    type: object
    properties:
      containerId:
        type: string
      layerId:
        type: string
      repoName:
        type: string
      execPath:
        type: string
      execArgs:
        type: array
        items:
          type: string
      created:
        type: integer
        format: int64
      state:
        type: string
      status:
        type: string
      ports:
        type: array
        items:
          type: string
      names:
          type: array
          items:
            type: string
      storageSize:
        type: integer
        format: int64
  ContainerConfig:
    type: object
    properties:
      containerId:
        type: string
      layerId:
        type: string
      repoName:
        type: string
      created:
        type: integer
        format: int64
      names:
        type: array
        items:
          type: string
      labels: #this is a map/dictionary
        type: object
        additionalProperties:
          type: string
      state:
        type: string
      restartCount:
        type: integer
        format: int32
      hostName:
        type: string
      attachStdin:
        type: boolean
      attachStdout:
        type: boolean
      attachStderr:
        type: boolean
      tty:
        type: boolean
      consoleSize:
        type: object
        properties:
          width:
            type: integer
          height:
            type: integer
      openStdin:
        type: boolean
      logPath:
        type: string
      reservation:
        $ref: "#/definitions/ReservationConfig"
  ReservationConfig:
    type: object
    properties:
      cpuCount:
        type: integer
      memoryLimit:
        type: integer
  HostConfig:
    description: "Information about the virtual container host (VCH)"
    type: object
    properties:
      architecture:
        type: string
      ostype:
        type: string
      kernelVersion:
        type: string
      reservation:
        $ref: "#/definitions/ReservationConfig"
  ProcessConfig:
    type: object
    properties:
      pid:
        type: integer
      execPath:
        type: string
      execArgs:
        type: array
        items:
          type: string
      workingDir:
        type: string
      env:
        type: array
        items:
          type: string
      status:
        type: string
      started:
        type: string
        format: datetime
      finished:
        type: string
        format: datetime
      exitCode:
        type: integer
      errorMsg:
        type: string
  VolumeConfig:
    type: object
    properties:
      label:
        type: array
        items:
          type: string
      mountPoint:
        type: string
      readWrite:
        type: boolean
