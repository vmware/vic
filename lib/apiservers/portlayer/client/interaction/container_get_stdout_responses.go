package interaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// ContainerGetStdoutReader is a Reader for the ContainerGetStdout structure.
type ContainerGetStdoutReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *ContainerGetStdoutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewContainerGetStdoutOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewContainerGetStdoutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewContainerGetStdoutInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewContainerGetStdoutOK creates a ContainerGetStdoutOK with default headers values
func NewContainerGetStdoutOK(writer io.Writer) *ContainerGetStdoutOK {
	return &ContainerGetStdoutOK{
		Payload: writer,
	}
}

/*ContainerGetStdoutOK handles this case with default header values.

OK
*/
type ContainerGetStdoutOK struct {
	Payload io.Writer
}

func (o *ContainerGetStdoutOK) Error() string {
	return fmt.Sprintf("[GET /interaction/{id}/stdout][%d] containerGetStdoutOK  %+v", 200, o.Payload)
}

func (o *ContainerGetStdoutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerGetStdoutNotFound creates a ContainerGetStdoutNotFound with default headers values
func NewContainerGetStdoutNotFound() *ContainerGetStdoutNotFound {
	return &ContainerGetStdoutNotFound{}
}

/*ContainerGetStdoutNotFound handles this case with default header values.

Container not found
*/
type ContainerGetStdoutNotFound struct {
	Payload *models.Error
}

func (o *ContainerGetStdoutNotFound) Error() string {
	return fmt.Sprintf("[GET /interaction/{id}/stdout][%d] containerGetStdoutNotFound  %+v", 404, o.Payload)
}

func (o *ContainerGetStdoutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerGetStdoutInternalServerError creates a ContainerGetStdoutInternalServerError with default headers values
func NewContainerGetStdoutInternalServerError() *ContainerGetStdoutInternalServerError {
	return &ContainerGetStdoutInternalServerError{}
}

/*ContainerGetStdoutInternalServerError handles this case with default header values.

Failed to get stdout
*/
type ContainerGetStdoutInternalServerError struct {
	Payload *models.Error
}

func (o *ContainerGetStdoutInternalServerError) Error() string {
	return fmt.Sprintf("[GET /interaction/{id}/stdout][%d] containerGetStdoutInternalServerError  %+v", 500, o.Payload)
}

func (o *ContainerGetStdoutInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
