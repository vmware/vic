package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WriteImageHandlerFunc turns a function with the right signature into a write image handler
type WriteImageHandlerFunc func(WriteImageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WriteImageHandlerFunc) Handle(params WriteImageParams) middleware.Responder {
	return fn(params)
}

// WriteImageHandler interface for that can handle valid write image params
type WriteImageHandler interface {
	Handle(WriteImageParams) middleware.Responder
}

// NewWriteImage creates a new http.Handler for the write image operation
func NewWriteImage(ctx *middleware.Context, handler WriteImageHandler) *WriteImage {
	return &WriteImage{Context: ctx, Handler: handler}
}

/*WriteImage swagger:route POST /storage/{store_name} storage writeImage

Creates a new image layer

Creates a new image layer in an image store

*/
type WriteImage struct {
	Context *middleware.Context
	Handler WriteImageHandler
}

func (o *WriteImage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewWriteImageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
