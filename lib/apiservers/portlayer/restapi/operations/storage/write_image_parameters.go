package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewWriteImageParams creates a new WriteImageParams object
// with the default values initialized.
func NewWriteImageParams() WriteImageParams {
	var ()
	return WriteImageParams{}
}

// WriteImageParams contains all the bound params for the write image operation
// typically these are obtained from a http.Request
//
// swagger:parameters WriteImage
type WriteImageParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  In: body
	*/
	ImageFile io.ReadCloser
	/*
	  Required: true
	  In: query
	*/
	ImageID string
	/*
	  In: query
	*/
	Metadatakey *string
	/*
	  In: query
	*/
	Metadataval *string
	/*
	  Required: true
	  In: query
	*/
	ParentID string
	/*
	  Required: true
	  In: path
	*/
	StoreName string
	/*
	  Required: true
	  In: query
	*/
	Sum string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *WriteImageParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		o.ImageFile = r.Body

	}

	qImageID, qhkImageID, _ := qs.GetOK("image_id")
	if err := o.bindImageID(qImageID, qhkImageID, route.Formats); err != nil {
		res = append(res, err)
	}

	qMetadatakey, qhkMetadatakey, _ := qs.GetOK("metadatakey")
	if err := o.bindMetadatakey(qMetadatakey, qhkMetadatakey, route.Formats); err != nil {
		res = append(res, err)
	}

	qMetadataval, qhkMetadataval, _ := qs.GetOK("metadataval")
	if err := o.bindMetadataval(qMetadataval, qhkMetadataval, route.Formats); err != nil {
		res = append(res, err)
	}

	qParentID, qhkParentID, _ := qs.GetOK("parent_id")
	if err := o.bindParentID(qParentID, qhkParentID, route.Formats); err != nil {
		res = append(res, err)
	}

	rStoreName, rhkStoreName, _ := route.Params.GetOK("store_name")
	if err := o.bindStoreName(rStoreName, rhkStoreName, route.Formats); err != nil {
		res = append(res, err)
	}

	qSum, qhkSum, _ := qs.GetOK("sum")
	if err := o.bindSum(qSum, qhkSum, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WriteImageParams) bindImageID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("image_id", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("image_id", "query", raw); err != nil {
		return err
	}

	o.ImageID = raw

	return nil
}

func (o *WriteImageParams) bindMetadatakey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Metadatakey = &raw

	return nil
}

func (o *WriteImageParams) bindMetadataval(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Metadataval = &raw

	return nil
}

func (o *WriteImageParams) bindParentID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("parent_id", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("parent_id", "query", raw); err != nil {
		return err
	}

	o.ParentID = raw

	return nil
}

func (o *WriteImageParams) bindStoreName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.StoreName = raw

	return nil
}

func (o *WriteImageParams) bindSum(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("sum", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("sum", "query", raw); err != nil {
		return err
	}

	o.Sum = raw

	return nil
}
