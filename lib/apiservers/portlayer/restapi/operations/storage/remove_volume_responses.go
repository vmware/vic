package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*RemoveVolumeOK Volume successfully removed

swagger:response removeVolumeOK
*/
type RemoveVolumeOK struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveVolumeOK creates RemoveVolumeOK with default headers values
func NewRemoveVolumeOK() *RemoveVolumeOK {
	return &RemoveVolumeOK{}
}

// WithPayload adds the payload to the remove volume o k response
func (o *RemoveVolumeOK) WithPayload(payload *models.Error) *RemoveVolumeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove volume o k response
func (o *RemoveVolumeOK) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveVolumeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*RemoveVolumeNotFound Volume not found

swagger:response removeVolumeNotFound
*/
type RemoveVolumeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveVolumeNotFound creates RemoveVolumeNotFound with default headers values
func NewRemoveVolumeNotFound() *RemoveVolumeNotFound {
	return &RemoveVolumeNotFound{}
}

// WithPayload adds the payload to the remove volume not found response
func (o *RemoveVolumeNotFound) WithPayload(payload *models.Error) *RemoveVolumeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove volume not found response
func (o *RemoveVolumeNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveVolumeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*RemoveVolumeConflict Volume in use

swagger:response removeVolumeConflict
*/
type RemoveVolumeConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveVolumeConflict creates RemoveVolumeConflict with default headers values
func NewRemoveVolumeConflict() *RemoveVolumeConflict {
	return &RemoveVolumeConflict{}
}

// WithPayload adds the payload to the remove volume conflict response
func (o *RemoveVolumeConflict) WithPayload(payload *models.Error) *RemoveVolumeConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove volume conflict response
func (o *RemoveVolumeConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveVolumeConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*RemoveVolumeInternalServerError Server Error

swagger:response removeVolumeInternalServerError
*/
type RemoveVolumeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveVolumeInternalServerError creates RemoveVolumeInternalServerError with default headers values
func NewRemoveVolumeInternalServerError() *RemoveVolumeInternalServerError {
	return &RemoveVolumeInternalServerError{}
}

// WithPayload adds the payload to the remove volume internal server error response
func (o *RemoveVolumeInternalServerError) WithPayload(payload *models.Error) *RemoveVolumeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove volume internal server error response
func (o *RemoveVolumeInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveVolumeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
