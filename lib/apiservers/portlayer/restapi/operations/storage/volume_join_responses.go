package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

/*VolumeJoinOK OK

swagger:response volumeJoinOK
*/
type VolumeJoinOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewVolumeJoinOK creates VolumeJoinOK with default headers values
func NewVolumeJoinOK() *VolumeJoinOK {
	return &VolumeJoinOK{}
}

// WithPayload adds the payload to the volume join o k response
func (o *VolumeJoinOK) WithPayload(payload string) *VolumeJoinOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the volume join o k response
func (o *VolumeJoinOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VolumeJoinOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*VolumeJoinNotFound Volume not found

swagger:response volumeJoinNotFound
*/
type VolumeJoinNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewVolumeJoinNotFound creates VolumeJoinNotFound with default headers values
func NewVolumeJoinNotFound() *VolumeJoinNotFound {
	return &VolumeJoinNotFound{}
}

// WithPayload adds the payload to the volume join not found response
func (o *VolumeJoinNotFound) WithPayload(payload *models.Error) *VolumeJoinNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the volume join not found response
func (o *VolumeJoinNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VolumeJoinNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*VolumeJoinInternalServerError ServerError

swagger:response volumeJoinInternalServerError
*/
type VolumeJoinInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewVolumeJoinInternalServerError creates VolumeJoinInternalServerError with default headers values
func NewVolumeJoinInternalServerError() *VolumeJoinInternalServerError {
	return &VolumeJoinInternalServerError{}
}

// WithPayload adds the payload to the volume join internal server error response
func (o *VolumeJoinInternalServerError) WithPayload(payload *models.Error) *VolumeJoinInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the volume join internal server error response
func (o *VolumeJoinInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VolumeJoinInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*VolumeJoinDefault error

swagger:response volumeJoinDefault
*/
type VolumeJoinDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewVolumeJoinDefault creates VolumeJoinDefault with default headers values
func NewVolumeJoinDefault(code int) *VolumeJoinDefault {
	if code <= 0 {
		code = 500
	}

	return &VolumeJoinDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the volume join default response
func (o *VolumeJoinDefault) WithStatusCode(code int) *VolumeJoinDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the volume join default response
func (o *VolumeJoinDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the volume join default response
func (o *VolumeJoinDefault) WithPayload(payload *models.Error) *VolumeJoinDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the volume join default response
func (o *VolumeJoinDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VolumeJoinDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
