#!/bin/bash

MOUNTPOINT="/mnt/containerfs"

mkdir -p /mnt/containerfs

# see if we should bail to the bootstrap or pivot into the container
# do this before the fork so we don't have a backdoor call in the hot path
# NOTE: this is moved after the fork during debugging so we can chose on a per VM basis
SHELL=`/sbin/rpctool -get bootstrap-shell 2>/dev/null`

echo "Waiting for rootfs"
while [ ! -e /dev/disk/by-label/containerfs ]; do :;done
if mount -t ext4 /dev/disk/by-label/containerfs ${MOUNTPOINT}; then
    # make the required directory structure, but presume that something in the daemon
    # has done the *right* thing for /.tether* and created them where it won't show in a diff
    # we do this to ensure that subsequent commands don't fail if the daemon hasn't prepped
    # the structure
    mkdir -p ${MOUNTPOINT}/.tether ${MOUNTPOINT}/.tether-init

    # ensure that no matter what we have access to required devices
    # WARNING WARNING WARNING WARNING WARNING
    # if the tmpfs is not large enough odd hangs can occur and the ESX event log will
    # report the guest disabling the CPU
    mount -t tmpfs -o size=128m tmpfs ${MOUNTPOINT}/.tether/

    # if we don't have a populated init layer, pull from guestinfo
    if [ ! -f ${MOUNTPOINT}/.tether-init/docker-id ]; then
        mount -t tmpfs -o size=1m tmpfs ${MOUNTPOINT}/.tether-init/

        # TODO: check for "No such value" and do something sane if the guestinfo values aren't present
        /sbin/rpctool -get docker_id > ${MOUNTPOINT}/.tether-init/docker-id
        /sbin/rpctool -get init_key > ${MOUNTPOINT}/.tether-init/init_key

        # The container will start and connect without the following being correct, so error handling is easier
        /sbin/rpctool -get hostname > ${MOUNTPOINT}/.tether-init/hostname
        /sbin/rpctool -get resolv.conf > ${MOUNTPOINT}/.tether-init/resolv.conf
        echo "127.0.0.1 localhost localhost.localdomain" > ${MOUNTPOINT}/.tether-init/hosts

        # create the assumed structure
        # TODO: this cannot be in guest and still not show up in diffs
        mkdir -p ${MOUNTPOINT}/dev ${MOUNTPOINT}/proc ${MOUNTPOINT}/sys ${MOUNTPOINT}/etc
        # ln -sf /proc/mounts ${MOUNTPOINT}/etc/mtab

        touch ${MOUNTPOINT}/etc/hostname && mount --bind ${MOUNTPOINT}/.tether-init/hostname ${MOUNTPOINT}/etc/hostname
        touch ${MOUNTPOINT}/etc/resolv.conf && mount --bind ${MOUNTPOINT}/.tether-init/resolv.conf ${MOUNTPOINT}/etc/resolv.conf
        touch ${MOUNTPOINT}/etc/hosts && mount --bind ${MOUNTPOINT}/.tether-init/hosts ${MOUNTPOINT}/etc/hosts
    fi

    # this is so we're not exposing the raw container disk if we wouldn't be otherwise
    #	rm -f /mnt/.tether/volumes/containerfs

    # set up the hostname
    if [ -f ${MOUNTPOINT}/etc/hostname ]; then
        hostnamectl set-hostname $(cat ${MOUNTPOINT}/etc/hostname)
    else
        hostnamectl set-hostname $(cat ${MOUNTPOINT}/.tether-init/hostname)
    fi

    # enable full system functionality in the container
    echo "Publishing modules within container"
    mkdir -p ${MOUNTPOINT}/lib/modules
    mount --bind /lib/modules ${MOUNTPOINT}/lib/modules

    # switch to the new root
    echo "prepping for switch to container filesystem"

    # copy the init binary into the new root - ideally I'd run this purely from memory without a presence on the filesystem
    cp /bin/tether ${MOUNTPOINT}/.tether/tether-bin

    /sbin/rpctool -get "vic.configblob" > ${MOUNTPOINT}/.tether/tether.config

    # temporary hack for waiting the network
    while ! ip addr show eno1 | grep " inet "; do sleep 1;done

    cat << EOF > ${MOUNTPOINT}/.tether/tether
#!/bin/sh

if [ -x /sbin/ip -o -x /bin/ip ]; then
    addr=$(ip addr show eno1  | grep " inet " | cut -d " " -f6)
    gateway=$(ip route show | grep "^default" | cut -d " " -f3)

    echo "Setting IP addr to " \$addr > /dev/ttyS1
    echo "Setting route to" \$gateway > /dev/ttyS1

    ip addr add \$addr dev eno1
    ip link set dev eno1 up
    ip route add default via \$gateway dev eno1
fi

/.tether/tether-bin $(cat ${MOUNTPOINT}/.tether/tether.config)
EOF
    chmod +x  ${MOUNTPOINT}/.tether/tether

    # We don't want eth0 for --net=none passed
    if [ -d /sys/module/vmxnet3/ ] && [ $(cat /sys/class/net/eno1/address) == "ff:ff:ff:ff:ff:ff" ]; then
        modprobe -r vmxnet3
    fi

    echo "switching to the new mount"
    if [ "$SHELL" != "true" ]; then
        systemctl switch-root ${MOUNTPOINT} /.tether/tether 2>&1
    else
        systemctl switch-root ${MOUNTPOINT} /bin/ash 2>&1
    fi
else
    # TODO: what do we do here? we really need to somehow report an error
    # fail hard
    echo "Unable to chroot into container filesystem"
fi

# Shut the system down
systemctl poweroff
