#!/bin/bash

set -x

echo 1 > /proc/sys/net/ipv4/conf/all/arp_notify
echo 1 > /proc/sys/net/ipv4/conf/default/arp_notify

echo "Loading drivers"
drivers=("vmxnet3" \
	"nfnetlink" \
	"iptable_filter" \
	"xt_conntrack" \
	"nf_conntrack" \
	"nf_conntrack_ipv4" \
	"nf_defrag_ipv4" \
	"ipt_REJECT"\
	"nf_reject_ipv4"\
	"nfsv3")

for i in ${drivers[@]}; do
    /usr/sbin/modprobe $i
done

MOUNTPOINT="/mnt/containerfs"

mkdir -p /mnt/containerfs

echo "Waiting for rootfs"
while [ ! -e /dev/disk/by-label/containerfs ]; do :;done
if mount -t ext4 /dev/disk/by-label/containerfs ${MOUNTPOINT}; then
    # ensure mountpoint exists
    mkdir -p ${MOUNTPOINT}/.tether

    # ensure that no matter what we have access to required devices
    # WARNING WARNING WARNING WARNING WARNING
    # if the tmpfs is not large enough odd hangs can occur and the ESX event log will
    # report the guest disabling the CPU
    mount -t tmpfs -o size=64m tmpfs ${MOUNTPOINT}/.tether/

    # enable full system functionality in the container
    echo "Publishing modules within container"
    mkdir -p ${MOUNTPOINT}/lib/modules
    cp -pr /lib/modules/* ${MOUNTPOINT}/lib/modules/

    # switch to the new root
    echo "prepping for switch to container filesystem"

    cp /bin/tether ${MOUNTPOINT}/.tether/tether

    # ldd of xtables-multi yields the following list of libraries we need to
    # copy into our initrd.  We need these binaries in order to call iptables
    #
    # before the switch-root.  linux-vdso.so.1 (0x00007ffc94d0d000)
    # libip4tc.so.0 => /baz/lib/libip4tc.so.0 (0x00007f97fc721000)
    # libip6tc.so.0 => /baz/lib/libip6tc.so.0 (0x00007f97fc519000)
    # libxtables.so.11 => /baz/lib/libxtables.so.11 (0x00007f97fc30c000)
    # libm.so.6 => /lib64/libm.so.6 (0x00007f97fc00e000)
    # libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007f97fbdf7000)
    # libc.so.6 => /baz/lib/libc.so.6 (0x00007f97fba53000)
    # libdl.so.2 => /baz/lib/libdl.so.2 (0x00007f97fb84f000)
    # /lib64/ld-linux-x86-64.so.2 (0x00007f97fc929000)

    mkdir ${MOUNTPOINT}/.tether/lib
    mkdir ${MOUNTPOINT}/.tether/lib64
    cp -a /sbin/*tables* ${MOUNTPOINT}/.tether/

    cp -a /lib/libm.* /lib/libm-* /lib/libgcc_s* /lib/libip*tc* /lib/libxtables* /lib/libdl* /lib/libc.so* /lib/libc-* ${MOUNTPOINT}/.tether/lib
    cp -a /lib64/ld-* ${MOUNTPOINT}/.tether/lib64

    mkdir -p ${MOUNTPOINT}/usr/lib
    cp -r /usr/lib/iptables ${MOUNTPOINT}/usr/lib/

    until [[ $(ls -1 /dev/disk/by-label | wc -l) -eq $(ls -1 /sys/block | wc -l) ]]; do sleep 0.1;done

    echo "switching to the new mount"
    systemctl switch-root ${MOUNTPOINT} /.tether/tether 2>&1
else
    # TODO: what do we do here? we really need to somehow report an error
    # fail hard
    echo "Unable to chroot into container filesystem"
fi

# Shut the system down
systemctl poweroff
