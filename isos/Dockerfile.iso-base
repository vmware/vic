FROM golang:1.6

# Install the necessary tools for the build
RUN   apt-get update && apt-get -y install curl cpio xorriso rpm tar xz-utils bzip2 yum

ENV PHOTON_RPM_REPO http://bonneville.eng.vmware.com:8080/job/bonneville-kernel/lastSuccessfulBuild/artifact/binary/
ENV PHOTON_KERNEL_RPM linux-esx-4.2.0-10.x86_64.rpm

ENV ROOTFS /rootfs
ENV BOOTFS /bootfs
ENV KERNEL_TREE /linux_tree
ENV ISOOUT stdio:/dev/fd/1
# Default init is bash - can/should be overridden
ENV INIT /bin/bash

# Create a /lib64 link in the root filesystem - this is done for dnsmasq and dynamically linked binaries
# that we compile here, simply because there's little to chose between that and explicitly setting library
# search paths at this point
RUN mkdir -p $ROOTFS && ln -s /lib $ROOTFS/lib64

# grabbing newer version of CA Certs so that curl will be able to trust our artifact source.
RUN mkdir -p /tmp/certs && curl -L https://curl.haxx.se/ca/cacert.pem -o /tmp/certs/cacert.pem

# Copy in script to combine boot file system
COPY generate-iso.sh /tmp/
RUN chmod a+x /tmp/generate-iso.sh

# Extract the kernel rpm contents
RUN mkdir -p $KERNEL_TREE && cd $KERNEL_TREE && \
    curl -L $PHOTON_RPM_REPO/$PHOTON_KERNEL_RPM -o /tmp/$PHOTON_KERNEL_RPM && \
    rpm2cpio /tmp/$PHOTON_KERNEL_RPM | cpio -id

# Copy the kernel to the boot folder
RUN mkdir -p $BOOTFS/boot && mv $KERNEL_TREE/boot/vmlinuz-esx-4.2.0 $BOOTFS/boot/vmlinuz64

# Install the photon rootfs as well as the packages needed for the appliance.
COPY rootfs.tar.bz /tmp/rootfs.tar.bz
RUN cd /tmp && bzip2 -d rootfs.tar.bz && tar xf rootfs.tar -C $ROOTFS && rm rootfs.tar

RUN rm $ROOTFS/etc/yum.repos.d/photon.repo $ROOTFS/etc/yum.repos.d/photon-updates.repo &&\
    mkdir -p /etc/pki/rpm-gpg/ && \
    cp $ROOTFS/etc/pki/rpm-gpg/VMWARE-RPM-GPG-KEY /etc/pki/rpm-gpg/ && \
    mkdir -p /etc/pki/tls/ && \
    cp -r $ROOTFS/etc/pki/tls/certs /etc/pki/tls/

# Replace the modules and firmware with what came from the photon kernel rpm.
RUN rm -rf $ROOTFS/lib/modules/ $ROOTFS/lib/firmware/ && \
    mkdir -p $ROOTFS/lib/modules/ && \
    mv $KERNEL_TREE/lib/modules/ $ROOTFS/lib/

COPY photon.repo photon-updates.repo $ROOTFS/etc/yum.repos.d/

# RUN yum --installroot=$ROOTFS -y install systemd \
#                                      net-tools \
#                                      tar \
#                                      curl \
#                                      openssh \
#                                      openssl \
#                                      expat \
#                                      libgcrypt \
#                                      nfs-util \
#                                      libtirpc \
#                                      e2fsprogs \
#                                      util-linux \
#                                      tcp-wrappers \
#                                      openssh \
#                                      net-utils

# Populate with the tailored files from build context
COPY isolinux $BOOTFS/boot/isolinux

# Construct the root filesystem, generate the ISO and dump to stdout
# To write to a file, set ISOOUT to a target file path (directory must exist)
CMD ["/bin/bash", "/tmp/generate-iso.sh"]