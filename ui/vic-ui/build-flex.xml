<project name="vic-ui" default="make-war-bundle">
   <description>
       Ant build script example for the Flex UI plug-in 'vic-ui'.
       The output is a bundle in target/vic-ui-war.war that can be
       copied in the "plugins" folder of the plugin-package.
       -----------------------------------------------------------------------
       NOTE: you don't need to use this script during development with Eclipse
       except to compile resources, see the compile-resources target below.
       -----------------------------------------------------------------------
   </description>

   <!-- SDK home folders should be set in environment variables -->
   <property environment="env"/>
   <property name="FLEX_HOME" value="${env.FLEX_HOME}"/>
   <property name="VSPHERE_SDK_HOME" value="${env.VSPHERE_SDK_HOME}"/>

   <!-- name of the war output directory and bundle file -->
   <property name="WAR_NAME" value="vic-ui-war"/>

   <property name="BUILD_DIR" value="${basedir}/war/target"/>
   <property name="WAR_DIR" value="${BUILD_DIR}/${WAR_NAME}"/>
   <property name="SRC_DIR" value="${basedir}/swf/src/main/flex"/>
   <property name="WEBAPP_DIR" value="${basedir}/war/src/main/webapp"/>
   <property name="REGEXP1" value="^(.*)\${file.separator}(.*).properties$$"/>
   <property name="REGEXP2" value="\2-\1.properties"/>

   <!-- Import the definition of mxmlc-macro -->
   <import file="${VSPHERE_SDK_HOME}/resources/flex-macros.xml"/>

   <!-- Check SDK setup -->
   <target name="check-sdk" description="Do not select this internal target.">
      <available file="${FLEX_HOME}/frameworks/libs/player/11.5/playerglobal.swc" property="flex-sdk-ok"/>
      <fail unless="flex-sdk-ok" message="Flex SDK setup incomplete!
${line.separator} Cannot find file ${FLEX_HOME}/frameworks/libs/player/11.5/playerglobal.swc
${line.separator} This file is required to compile for Flash Player 11.5 and must be added to your setup
${line.separator} Download http://fpdownload.macromedia.com/get/flashplayer/installers/archive/playerglobal/playerglobal11_5.swc
${line.separator} Then rename it playerglobal.swc and move it to ${FLEX_HOME}/frameworks/libs/player/11.5/" />
   </target>

   <!-- clean the generated build files -->
   <target name="clean" description="Do not select this internal target.">
      <delete dir="${basedir}/swf/target"/>
      <delete dir="${BUILD_DIR}" />
   </target>

   <!-- Compile the plugin source into .swf file.
        ECLIPSE NOTE: building the Flex project in Eclipse does the same thing.
   -->
   <target name="compile-flex" depends="check-sdk"
         description="Do not select this internal target.">
      <mxmlc-macro file="'${SRC_DIR}'/Vicui.mxml">
         <arg line="-source-path+='${SRC_DIR}'"/>
         <arg line="-source-path+='${SRC_DIR}'/locale/{locale}"/>
         <arg line="-resource-bundle-list='${BUILD_DIR}'/bundles.properties" />
         <arg line="-output='${WAR_DIR}'/Vicui.swf"/>
      </mxmlc-macro>
   </target>

   <!-- Compile separate bundle resource files vic-ui-resources-{locale}.swf
        This file name must match the name declared in plugin.xml <resource> tag.
        ECLIPSE NOTE: the Flex project builder does NOT compile resources, so you
        must run this compile-resources target each time your resources change.
   -->
   <target name="compile-resources" depends="check-sdk"
         description="==> Select this target alone to compile resources in Eclipse">
      <property file="${BUILD_DIR}/bundles.properties"/>

      <!-- default US version -->
      <mxmlc-macro>
         <arg line="-locale=en_US" />
         <arg line="-source-path+='${SRC_DIR}'/locale/{locale}"/>
         <arg line="-output='${basedir}'/swf/target/locales/vic-ui-resources-en_US.swf"/>
         <arg line="-include-resource-bundles ${bundles}" />
      </mxmlc-macro>

      <!-- Generate resource bundles for the other required locales
           with a copy of the US version for now -->

      <copy file="${basedir}/swf/target/locales/vic-ui-resources-en_US.swf"
          tofile="${basedir}/swf/target/locales/vic-ui-resources-de_DE.swf"/>
      <copy file="${basedir}/swf/target/locales/vic-ui-resources-en_US.swf"
          tofile="${basedir}/swf/target/locales/vic-ui-resources-fr_FR.swf"/>
      <copy file="${basedir}/swf/target/locales/vic-ui-resources-en_US.swf"
          tofile="${basedir}/swf/target/locales/vic-ui-resources-ja_JP.swf"/>
      <copy file="${basedir}/swf/target/locales/vic-ui-resources-en_US.swf"
          tofile="${basedir}/swf/target/locales/vic-ui-resources-ko_KR.swf"/>
      <copy file="${basedir}/swf/target/locales/vic-ui-resources-en_US.swf"
          tofile="${basedir}/swf/target/locales/vic-ui-resources-zh_CN.swf"/>
      <copy file="${basedir}/swf/target/locales/vic-ui-resources-en_US.swf"
          tofile="${basedir}/swf/target/locales/vic-ui-resources-zh_TW.swf"/>

      <!-- Copy all bundle resources to WAR_DIR -->

      <copy todir="${WAR_DIR}/locales" failonerror="false">
         <fileset dir="${basedir}/swf/target/locales"/>
      </copy>

      <!-- Copy + rename all properties file to WAR_DIR for future compatibility -->

      <copy todir="${WAR_DIR}/locales" failonerror="false">
         <fileset dir="${SRC_DIR}/locale"/>
         <mapper type="regexp" from="${REGEXP1}" to="${REGEXP2}"/>
      </copy>
   </target>

   <!-- Default target building the war bundle.
        ECLIPSE NOTE: this target is not needed when using Eclipse, only the
        compile-resources target is useful. See the SDK Tutorial for more info.
   -->
   <target name="make-war-bundle" depends="check-sdk, clean, compile-flex, compile-resources"
           description="==> Unselect this target if project is already built in Eclipse, see the SDK Tutorial.">
      <!-- Copy assets and webapp folders if any -->
      <copy todir="${WAR_DIR}/assets" failonerror="false">
         <fileset dir="${basedir}/swf/src/main/flex/assets"/>
      </copy>
      <copy todir="${WAR_DIR}">
         <fileset dir="${WEBAPP_DIR}"/>
      </copy>

      <!-- Create the war bundle -->
      <jar  destfile="${BUILD_DIR}/${WAR_NAME}.war"
            manifest="${WEBAPP_DIR}/META-INF/MANIFEST.MF"
            basedir="${WAR_DIR}"/>

   </target>
</project>

