package {{ .Name }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "net/http"
  "github.com/go-swagger/go-swagger/errors"
  "github.com/go-swagger/go-swagger/swag"
  "github.com/go-swagger/go-swagger/client"
  "github.com/go-swagger/go-swagger/httpkit"
  "github.com/go-swagger/go-swagger/httpkit/validate"

  strfmt "github.com/go-swagger/go-swagger/strfmt"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

// New creates a new {{ humanize .Name }} API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
  return &Client{transport: transport, formats: formats}
}

/*
Client {{ if .Summary }}{{ .Summary }}{{ if .Description }}

{{ .Description }}{{ end }}{{ else if .Description}}{{ .Description }}{{ else }}for {{ humanize .Name }} API{{ end }}
*/
type Client struct {
  transport client.Transport
  formats strfmt.Registry
}

{{ range .Operations }}/*
{{ pascalize .Name }} {{ if .Summary }}{{ pluralizeFirstWord (humanize .Summary) }}{{ if .Description }}

{{ .Description }}{{ end }}{{ else if .Description}}{{ .Description }}{{ else }}{{ humanize .Name }} API{{ end }}
*/
func (a *Client) {{ pascalize .Name }}(params *{{ pascalize .Name }}Params{{ if .Authorized }}, authInfo client.AuthInfoWriter{{end}}) {{ if .SuccessResponse }}(*{{ pascalize .SuccessResponse.Name }}, {{ end }}error{{ if .SuccessResponse }}){{ end }} {
  // TODO: Validate the params before sending
  if params == nil {
    params = New{{ pascalize .Name }}Params()
  }

  {{ if .SuccessResponse }}result{{else}}_{{ end }}, err := a.transport.Submit(&client.Operation{
    ID: {{ printf "%q" .Name }},
    Method: {{ printf "%q" .Method }},
    PathPattern: {{ printf "%q" .Path }},
    ProducesMediaTypes: {{ printf "%#v" .ProducesMediaTypes }},
    ConsumesMediaTypes: {{ printf "%#v" .ConsumesMediaTypes }},
    Schemes: {{ printf "%#v" .Schemes }},
    Params: params,
    Reader: &{{ pascalize .Name }}Reader{formats: a.formats},{{ if .Authorized }}
    AuthInfo: authInfo,{{ end}}
  })
  if err != nil {
    return {{ if .SuccessResponse }}nil, {{ end }}err
  }
  return {{ if .SuccessResponse }}result.(*{{ pascalize .SuccessResponse.Name }}), {{ end }}nil
}
{{ end }}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
  a.transport = transport
}

