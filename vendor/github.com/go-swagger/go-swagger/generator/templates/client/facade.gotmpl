package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command


import (
  "net/http"
  "github.com/go-swagger/go-swagger/httpkit"
  httptransport "github.com/go-swagger/go-swagger/httpkit/client"
  "github.com/go-swagger/go-swagger/swag"
  "github.com/go-swagger/go-swagger/spec"
  "github.com/go-swagger/go-swagger/errors"
  "github.com/go-swagger/go-swagger/httpkit/validate"
  "github.com/go-swagger/go-swagger/client"

  strfmt "github.com/go-swagger/go-swagger/strfmt"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

// Default {{ humanize .Name }} HTTP client.
var Default = NewHTTPClient(nil)

// NewHTTPClient creates a new {{ humanize .Name }} HTTP client.
func NewHTTPClient(formats strfmt.Registry) *{{ pascalize .Name }} {
  if formats == nil {
    formats = strfmt.Default
  }
  transport := httptransport.New({{ printf "%#v" .Host }}, {{ printf "%#v" .BasePath }}, {{ printf "%#v" .Schemes }})
  return New(transport, formats)
}

// New creates a new {{ humanize .Name }} client
func New(transport client.Transport, formats strfmt.Registry) *{{ pascalize .Name }} {
  cli := new({{ pascalize .Name }})
  cli.Transport = transport
  {{ range .OperationGroups }}
  cli.{{ pascalize .Name }} = {{ .Name }}.New(transport, formats)
  {{ end }}
  return cli
}

// {{ pascalize .Name }} is a client for {{ humanize .Name }}
type {{ pascalize .Name }} struct {
  {{ range .OperationGroups }}
  {{ pascalize .Name }} *{{ snakize .Name }}.Client
  {{ end }}
  Transport client.Transport
}


// SetTransport changes the transport on the client and all its subresources
func (c *{{pascalize .Name}}) SetTransport(transport client.Transport) {
  c.Transport = transport
  {{ range .OperationGroups }}
  c.{{ pascalize .Name }}.SetTransport(transport)
  {{ end }}
}
