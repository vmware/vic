{{ define "clientresponse" }}// New{{ pascalize .Name }} creates a {{ pascalize .Name }} with default headers values
func New{{ pascalize .Name }}({{ if eq .Code -1 }}code int{{ end }}) *{{ pascalize .Name }} {
  return &{{ pascalize .Name }}{
    {{ if eq .Code -1 }}_statusCode: code,
    {{ end }}{{ range .Headers }}{{ if .HasDefault }}{{ pascalize .Name }}: {{ printf "%#v" .Default }},{{ end }}
  {{ end }}}
}

/*{{ pascalize .Name}} handles this case with default header values.

{{ if .Description }}{{ .Description }}{{else}}{{ pascalize .Name }} {{ humanize .Name }}{{end}}
*/
type {{ pascalize .Name }} struct {
  {{ if eq .Code -1 }}
  _statusCode int

  {{ end }}{{ range .Headers }}{{ if .Description }}/*{{ .Description }}
  */{{ end }}
  {{ pascalize .Name }} {{ .GoType }}
  {{ end }}
  {{ if .Schema }}
  Payload {{ if and (not .Schema.IsBaseType) (not .Schema.IsInterface) .Schema.IsComplexObject }}*{{ end }}{{ .Schema.GoType }}
  {{ end }}
}{{ if eq .Code -1 }}

// Code gets the status code for the {{ humanize .Name }} response
func ({{ .ReceiverName }} *{{ pascalize .Name }}) Code() int {
  return {{ .ReceiverName }}._statusCode
}
{{ end }}


func ({{ .ReceiverName }} *{{ pascalize .Name }}) Error() string {
	return fmt.Sprintf("[{{ upper .Method }} {{ .Path }}][%d] {{ if .Name }}{{ .Name }} {{ else }}unknown error {{ end }}{{ if .Schema }} %+v{{ end }}", {{ if eq .Code -1 }}{{ .ReceiverName }}._statusCode{{ else }}{{ .Code }}{{ end }}{{ if .Schema }}, o.Payload{{ end }})
}


func ({{ .ReceiverName }} *{{ pascalize .Name }}) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {
  {{ range .Headers }}
  // response header {{.Name}}
  {{if .Converter }}{{ camelize .Name }}, err := {{ .Converter }}(response.GetHeader("{{ .Name }}"))
  if err != nil {
    return errors.InvalidType({{ .Path }}, "header", "{{ .GoType }}", response.GetHeader("{{ .Name }}"))
  }
  {{ .ReceiverName }}.{{ pascalize .Name }} = {{ camelize .Name }}
  {{ else if .IsCustomFormatter }}
  {{ camelize .Name }}, err := formats.Parse({{ printf "%q" .SwaggerFormat }}, response.GetHeader("{{ .Name }}"))
  if err != nil {
    return errors.InvalidType({{ .Path }}, "header", "{{ .GoType }}", response.GetHeader("{{ .Name }}"))
  }
  {{ .ReceiverName }}.{{ pascalize .Name }} = *({{ camelize .Name }}.(*{{ .GoType }}))
  {{ else}}{{ .ReceiverName }}.{{ pascalize .Name }} = response.GetHeader("{{ .Name }}")
  {{end}}
  {{ end }}
  {{ if .Schema }}
  {{ if .Schema.IsBaseType }}
  // response payload as interface type
  payload, err := {{ .ModelsPackage }}.Unmarshal{{ stripPackage .Schema.GoType .ModelsPackage }}{{ if .Schema.IsArray}}Slice{{ end }}(response.Body(), consumer)
  if err != nil {
    return err
  }
  {{ .ReceiverName }}.Payload = payload
  {{ else if .Schema.IsComplexObject }}
  {{ .ReceiverName }}.Payload = new({{ .Schema.GoType }})
  {{ end }}{{ if not .Schema.IsBaseType }}
  // response payload
  if err := consumer.Consume(response.Body(), {{ if not .Schema.IsComplexObject }}&{{ end}}{{ .ReceiverName }}.Payload); err != nil && err != io.EOF {
    return err
  }
  {{ end }}{{ end }}
  return nil
}
{{ end }}package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command


import (
  "io"
  "net/http"

  "github.com/go-swagger/go-swagger/httpkit"
  "github.com/go-swagger/go-swagger/swag"
  "github.com/go-swagger/go-swagger/errors"
  "github.com/go-swagger/go-swagger/httpkit/validate"
  "github.com/go-swagger/go-swagger/client"

  strfmt "github.com/go-swagger/go-swagger/strfmt"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

// {{ pascalize .Name }}Reader is a Reader for the {{ pascalize .Name }} structure.
type {{ pascalize .Name }}Reader struct {
  formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved {{ .ReceiverName }}.
func ({{ .ReceiverName }} *{{ pascalize .Name }}Reader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
  switch response.Code() {
  {{ range $key, $value := .Responses }}
    case {{ $key }}:
      result := New{{ pascalize $value.Name }}()
      if err := result.readResponse(response, consumer, {{ $.ReceiverName }}.formats); err != nil {
        return nil, err
      }
      return {{ if $value.IsSuccess }}result, nil{{else}}nil, result{{end}}
  {{end}}{{ if .DefaultResponse }}{{ with .DefaultResponse }}
    default:
      result := New{{ pascalize .Name }}(response.Code())
      if err := result.readResponse(response, consumer, {{ $.ReceiverName }}.formats); err != nil {
        return nil, err
      }
      return {{ if .IsSuccess }}result, nil{{else}}nil, result{{end}}{{ end }}{{else}}
    default:
      return nil, client.NewAPIError("unknown error", response, response.Code()){{ end }}
  }
}

{{ range $key, $value := .Responses }}
{{ template "clientresponse" $value }}
{{ end }}
{{ if .DefaultResponse }}
{{ template "clientresponse" .DefaultResponse }}
{{ end }}

{{ range .ExtraSchemas }}
/*{{ pascalize .Name }} {{ template "docstring" . }}
swagger:model {{ .Name }}
*/
{{ template "schema" . }}
{{ end }}
