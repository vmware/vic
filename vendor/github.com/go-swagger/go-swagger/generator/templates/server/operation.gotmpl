package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
  "net/http"

	context "golang.org/x/net/context"

  middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
  {{ range .DefaultImports }}{{ printf "%q" . }}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

// {{ pascalize .Name }}HandlerFunc turns a function with the right signature into a {{ humanize .Name }} handler
type {{ pascalize .Name }}HandlerFunc func({{ if .WithContext }}context.Context, {{ end }}{{ if .Params }}{{ pascalize .Name }}Params{{ end }}{{ if and .Authorized .Params }}, {{ end }}{{ if .Authorized }}{{ if not ( eq .Principal "interface{}" ) }}*{{ end }}{{ .Principal }}{{ end }}) middleware.Responder

// Handle executing the request and returning a response
func (fn {{ pascalize .Name }}HandlerFunc) Handle({{ if .WithContext }}ctx context.Context, {{ end }}{{if .Params}}params {{ pascalize .Name }}Params{{ end }}{{ if and .Authorized .Params }}, {{ end }}{{ if .Authorized }}principal {{ if not ( eq .Principal "interface{}" ) }}*{{ end }}{{ .Principal }}{{ end }}) middleware.Responder {
  return fn({{ if .WithContext }}ctx, {{ end }}{{ if .Params }}params{{ end }}{{ if and .Authorized .Params }}, {{ end }}{{ if .Authorized }}principal{{ end }})
}

// {{ pascalize .Name }}Handler interface for that can handle valid {{ humanize .Name }} params
type {{ pascalize .Name }}Handler interface {
  Handle({{ if .WithContext }}context.Context, {{ end }}{{ if .Params }}{{ pascalize .Name }}Params{{ end }}{{ if and .Authorized .Params }}, {{ end }}{{ if .Authorized }}{{ if not ( eq .Principal "interface{}" ) }}*{{ end }}{{ .Principal }}{{ end }}) middleware.Responder
}

// New{{ pascalize .Name }} creates a new http.Handler for the {{ humanize .Name }} operation
func New{{ pascalize .Name }}(ctx *middleware.Context, handler {{ pascalize .Name }}Handler) *{{ pascalize .Name }} {
  return &{{ pascalize .Name }}{Context: ctx, Handler: handler}
}

/*{{ pascalize .Name }} swagger:route {{ .Method }} {{ .Path }}{{ range .Tags }} {{ . }}{{ end }} {{ camelize .Name }}

{{ if .Summary }}{{ .Summary }}{{ if .Description }}

{{ .Description }}{{ end }}{{ else if .Description}}{{ .Description }}{{ else }}{{ pascalize .Name }} {{ humanize .Name }} API{{ end }}

*/
type {{ pascalize .Name }} struct {
  Context *middleware.Context
  Handler {{ pascalize .Name }}Handler
}

func ({{ .ReceiverName }} *{{ pascalize .Name }}) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
  route, _ := {{ .ReceiverName }}.Context.RouteInfo(r){{ if .Params }}
  var Params = New{{ pascalize .Name }}Params()
  {{ end }}
  {{ if .Authorized }}uprinc, err := {{ .ReceiverName }}.Context.Authorize(r, route)
  if err != nil {
    {{ .ReceiverName }}.Context.Respond(rw, r, route.Produces, route, err)
    return
  }
  var principal {{ if not (eq .Principal "interface{}") }}*{{ end }}{{ .Principal }}
  if uprinc != nil {
    principal = {{ if eq .Principal "interface{}" }}uprinc{{ else }}uprinc.(*{{ .Principal }}) // this is really a {{ .Principal }}, I promise{{ end }}
  }

  {{ end }}
  if err := {{ .ReceiverName }}.Context.BindValidRequest(r, route, {{ if .Params }}&Params{{ else }}nil{{ end }}); err != nil { // bind params
    {{ .ReceiverName }}.Context.Respond(rw, r, route.Produces, route, err)
    return
  }

  {{ if .Authorized }}
  res := {{ .ReceiverName }}.Handler.Handle({{ if .WithContext }}context.Background(), {{ end }}{{ if .Params }}Params, {{ end }}principal) // actually handle the request
  {{else}}
  res := {{ .ReceiverName }}.Handler.Handle({{ if .WithContext }}context.Background(), {{ end }}{{ if .Params }}Params{{ end }}) // actually handle the request
  {{ end }}
  {{ .ReceiverName }}.Context.Respond(rw, r, route.Produces, route, res)

}

{{ range .ExtraSchemas }}
/*{{ .Name }} {{ template "docstring" . }}
swagger:model {{ .Name }}
*/
{{ template "schema" . }}
{{ end }}
