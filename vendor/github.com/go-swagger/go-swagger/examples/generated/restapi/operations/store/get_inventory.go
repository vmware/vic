package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

// GetInventoryHandlerFunc turns a function with the right signature into a get inventory handler
type GetInventoryHandlerFunc func(interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetInventoryHandlerFunc) Handle(principal interface{}) middleware.Responder {
	return fn(principal)
}

// GetInventoryHandler interface for that can handle valid get inventory params
type GetInventoryHandler interface {
	Handle(interface{}) middleware.Responder
}

// NewGetInventory creates a new http.Handler for the get inventory operation
func NewGetInventory(ctx *middleware.Context, handler GetInventoryHandler) *GetInventory {
	return &GetInventory{Context: ctx, Handler: handler}
}

/*GetInventory swagger:route GET /store/inventory store getInventory

Returns pet inventories by status

Returns a map of status codes to quantities

*/
type GetInventory struct {
	Context *middleware.Context
	Handler GetInventoryHandler
}

func (o *GetInventory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, nil); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

/*GetInventoryOKBodyBody GetInventoryOKBodyBody get inventory o k body body

swagger:model GetInventoryOKBodyBody
*/
type GetInventoryOKBodyBody map[string]int32

// Validate validates this get inventory o k body body
func (o GetInventoryOKBodyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := validate.Required("getInventoryOK", "body", o); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
