package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*Error Error Structure

Contains all the properties any error response from the API will contain.
Some properties are optional so might be empty most of the time


swagger:model Error
*/
type Error struct {

	/* the error code, this is not necessarily the http status code

	Required: true
	*/
	Code int32 `json:"code,omitempty"`

	/* an optional url for getting more help about this error
	 */
	HelpURL *strfmt.URI `json:"helpUrl,omitempty"`

	/* a human readable version of the error

	Required: true
	*/
	Message string `json:"message,omitempty"`
}

// Validate validates this error
func (m *Error) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Error) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", int32(m.Code)); err != nil {
		return err
	}

	return nil
}

func (m *Error) validateMessage(formats strfmt.Registry) error {

	if err := validate.RequiredString("message", "body", string(m.Message)); err != nil {
		return err
	}

	return nil
}
