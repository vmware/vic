eyJhbGciOiJIUzI1NiJ9.IyBBZnRlciBhbnkgY2hhbmdlIHRvIHRoaXMgZmlsZSB5b3UgTVVTVCByZS1zaWduIGFuZCBjaGVja2luIHRoZSAuZHJvbmUueW1sLnNpZwojIFdoZW4geW91IGFyZSByZWFkeSB0byBzdWJtaXQgYSBwdWxsIHJlcXVlc3QsIHlvdSBtdXN0IHJlZ2VuZXJhdGUgLmRyb25lLnltbC5zaWcgZm9yIHRoZSB2bXdhcmUvdmljIHJlcG86CiMgJCBleHBvcnQgRFJPTkVfU0VSVkVSPWh0dHBzOi8vY2kudmNuYS5pbwojICQgZXhwb3J0IERST05FX1RPS0VOPTx0b2tlbj4KIyAkIGRyb25lIHNpZ24gdm13YXJlL3ZpYwojIFRoZSBzZWNyZXRzIGZpbGUgaXMgaW4gb3VyIGxvY2FsIGdpdCByZXBvLiAgQXNrIG1oYWdlbiBmb3IgYWNjZXNzLgoKLS0tCndvcmtzcGFjZToKICBiYXNlOiAvZ28KICBwYXRoOiBzcmMvZ2l0aHViLmNvbS92bXdhcmUvdmljCgpwaXBlbGluZToKICBjbG9uZToKICAgIGltYWdlOiBwbHVnaW5zL2dpdAogICAgdGFnczogdHJ1ZQogICAgIyBkb250IGNsb25lIHN1Ym1vZHVsZXMKICAgIHJlY3Vyc2l2ZTogZmFsc2UKCiAgd2FpdC1mb3ItYnVpbGQ6CiAgICBpbWFnZTogaGFyYm9yLmNpLmRyb25lLmxvY2FsL2xpYnJhcnkvdmljLWludGVncmF0aW9uLXRlc3Q6MS4zMQogICAgcHVsbDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIEJJTjogYmluCiAgICAgIEdPUEFUSDogL2dvCiAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgICAgVEVTVF9VUkxfQVJSQVk6ICR7VEVTVF9VUkxfQVJSQVl9CiAgICAgIERST05FX1NFUlZFUjogJHtEUk9ORV9TRVJWRVJ9CiAgICAgIERST05FX1RPS0VOOiAke0RST05FX1RPS0VOfQogICAgY29tbWFuZHM6CiAgICAgIC0gdGVzdHMvd2FpdF91bnRpbF9wcmV2aW91c19idWlsZHNfY29tcGxldGUuc2gKCiAgdmljLWVuZ2luZToKICAgIGltYWdlOiBoYXJib3IuY2kuZHJvbmUubG9jYWwvbGlicmFyeS92aWMtaW50ZWdyYXRpb24tdGVzdDoxLjMxCiAgICBwdWxsOiB0cnVlCiAgICBlbnZpcm9ubWVudDoKICAgICAgQklOOiBiaW4KICAgICAgR09QQVRIOiAvZ28KICAgICAgU0hFTEw6IC9iaW4vYmFzaAogICAgICBURVNUX1VSTF9BUlJBWTogICR7VEVTVF9VUkxfQVJSQVl9CiAgICAgIFRFU1RfVVNFUk5BTUU6ICAke1RFU1RfVVNFUk5BTUV9CiAgICAgIFRFU1RfUEFTU1dPUkQ6ICAke1RFU1RfUEFTU1dPUkR9CiAgICAgIEJVSUxEX05VTUJFUjogJHtEUk9ORV9CVUlMRF9OVU1CRVJ9CiAgICAgIENPTU1JVDogJHtEUk9ORV9DT01NSVR9CiAgICBjb21tYW5kczoKICAgICAgLSBtYWtlIG1hcmsKICAgICAgLSBtYWtlIGFsbAogICAgICAtIG1ha2Ugc2luY2VtYXJrCiAgICAgIC0gbWFrZSBtYXJrCiAgICAgIC0gZWNobyBgbHMgdmVuZG9yL2dpdGh1Yi5jb20vdm13YXJlL2dvdm1vbWkvdmltMjUvbWV0aG9kc2AKICAgICAgLSBlY2hvIGBscyB2ZW5kb3IvZ2l0aHViLmNvbS92bXdhcmUvZ292bW9taS92aW0yNS90eXBlc2AKICAgICAgLSBlY2hvIGBscyB2ZW5kb3IvZ2l0aHViLmNvbS9kb2NrZXIvZG9ja2VyL3ZlbmRvci9naXRodWIuY29tL29wZW5jb250YWluZXJzL3J1bmMvbGliY29udGFpbmVyL3N5c3RlbWAKICAgICAgLSBleHBvcnQgVklDX0VTWF9VUkxfQVJSQVk9ImB0ZXN0cy9nZXRfdGVzdF91cmwuc2hgIgogICAgICAtIG1ha2UgdGVzdAogICAgICAtIG1ha2Ugc2luY2VtYXJrCiAgICB3aGVuOgogICAgICBzdGF0dXM6ICBzdWNjZXNzCgogIHZpYy1pbnRlZ3JhdGlvbi10ZXN0LW9uLXByOgogICAgaW1hZ2U6IGhhcmJvci5jaS5kcm9uZS5sb2NhbC9saWJyYXJ5L3ZpYy1pbnRlZ3JhdGlvbi10ZXN0OjEuMzEKICAgIHB1bGw6IHRydWUKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICBCSU46IGJpbgogICAgICBHT1BBVEg6IC9nbwogICAgICBTSEVMTDogL2Jpbi9iYXNoCiAgICAgIExPR19URU1QX0RJUjogaW5zdGFsbC1sb2dzCiAgICAgIEdJVEhVQl9BVVRPTUFUSU9OX0FQSV9LRVk6ICAke0dJVEhVQl9BVVRPTUFUSU9OX0FQSV9LRVl9CiAgICAgIERST05FX1NFUlZFUjogICR7RFJPTkVfU0VSVkVSfQogICAgICBEUk9ORV9UT0tFTjogICR7RFJPTkVfVE9LRU59CiAgICAgIFRFU1RfVVJMX0FSUkFZOiAgJHtURVNUX1VSTF9BUlJBWX0KICAgICAgVEVTVF9VU0VSTkFNRTogICR7VEVTVF9VU0VSTkFNRX0KICAgICAgVEVTVF9QQVNTV09SRDogICR7VEVTVF9QQVNTV09SRH0KICAgICAgVEVTVF9EQVRBU1RPUkU6ICR7VEVTVF9EQVRBU1RPUkV9CiAgICAgIFRFU1RfVElNRU9VVDogJHtURVNUX1RJTUVPVVR9CiAgICAgIFJFUE9SVElOR19TRVJWRVJfVVJMOiAke1JFUE9SVElOR19TRVJWRVJfVVJMfQogICAgICBHT1ZDX0lOU0VDVVJFOiB0cnVlCiAgICAgIEdPVkNfVVNFUk5BTUU6ICAke1RFU1RfVVNFUk5BTUV9CiAgICAgIEdPVkNfUEFTU1dPUkQ6ICAke1RFU1RfUEFTU1dPUkR9CiAgICAgIEdPVkNfREFUQVNUT1JFOiAke1RFU1RfREFUQVNUT1JFfQogICAgICBHU19QUk9KRUNUX0lEOiAke0dTX1BST0pFQ1RfSUR9CiAgICAgIEdTX0NMSUVOVF9FTUFJTDogJHtHU19DTElFTlRfRU1BSUx9CiAgICAgIEdTX1BSSVZBVEVfS0VZOiAke0dTX1BSSVZBVEVfS0VZfQogICAgICBET01BSU46ICR7Q0lfRE9NQUlOfQogICAgICBTWVNMT0dfU0VSVkVSOiAke1NZU0xPR19TRVJWRVJ9CiAgICAgIFNZU0xPR19VU0VSOiAke1NZU0xPR19VU0VSfQogICAgICBTWVNMT0dfUEFTU1dEOiAke1NZU0xPR19QQVNTV0R9CiAgICBjb21tYW5kczoKICAgICAgLSBtYWtlIG1hcmsKICAgICAgLSB0ZXN0cy9pbnRlZ3JhdGlvbi10ZXN0LnNoCiAgICAgIC0gbWFrZSBzaW5jZW1hcmsKICAgIHdoZW46CiAgICAgIHN0YXR1czogIHN1Y2Nlc3MKCiAgdmljLXVpOgogICAgaW1hZ2U6IGhhcmJvci5jaS5kcm9uZS5sb2NhbC9saWJyYXJ5L3ZpYy1pbnRlZ3JhdGlvbi10ZXN0OjEuMzEKICAgIHB1bGw6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICBCSU46IGJpbgogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBtYXJrCiAgICAgIC0gbWFrZSB2aWMtdWktcGx1Z2lucwogICAgICAtIG1ha2Ugc2luY2VtYXJrCiAgICB3aGVuOgogICAgICBzdGF0dXM6ICBzdWNjZXNzCgogIGJ1bmRsZToKICAgIGltYWdlOiBoYXJib3IuY2kuZHJvbmUubG9jYWwvbGlicmFyeS9nb2xhbmc6MS44CiAgICBwdWxsOiB0cnVlCiAgICBlbnZpcm9ubWVudDoKICAgICAgQklOOiBiaW4KICAgICAgQklOX1RFTVBfRElSOiBiaW4vdmljCiAgICAgIEdPUEFUSDogL2dvCiAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgIGNvbW1hbmRzOgogICAgICAtIG1ha2UgbWFyawogICAgICAtIHJtIC1yZiAkQklOX1RFTVBfRElSCiAgICAgIC0gbWtkaXIgLXAgJEJJTl9URU1QX0RJUi91aQogICAgICAtIGNwIC1yZiB1aS9pbnN0YWxsZXIvKiAkQklOX1RFTVBfRElSL3VpCiAgICAgIC0gY3AgTElDRU5TRSAkQklOX1RFTVBfRElSCiAgICAgIC0gY3AgZG9jL2J1bmRsZS9SRUFETUUgJEJJTl9URU1QX0RJUgogICAgICAtIGNwICRCSU4vdmljLW1hY2hpbmUqICRCSU5fVEVNUF9ESVIKICAgICAgLSBjcCAkQklOL3ZpYy11aSogJEJJTl9URU1QX0RJUgogICAgICAtIGNwICRCSU4vYXBwbGlhbmNlLmlzbyAkQklOX1RFTVBfRElSCiAgICAgIC0gY3AgJEJJTi9ib290c3RyYXAuaXNvICRCSU5fVEVNUF9ESVIKICAgICAgLSB0YXIgY3p2ZiAkQklOL3ZpY18ke0RST05FX0JVSUxEX05VTUJFUn0udGFyLmd6IC1DICRCSU4gdmljCiAgICAgIC0gc2hhc3VtIC1hIDI1NiAkQklOL3ZpY18ke0RST05FX0JVSUxEX05VTUJFUn0udGFyLmd6CiAgICAgIC0gc2hhc3VtIC1hIDEgJEJJTi92aWNfJHtEUk9ORV9CVUlMRF9OVU1CRVJ9LnRhci5negogICAgICAtIG1kNXN1bSAkQklOL3ZpY18ke0RST05FX0JVSUxEX05VTUJFUn0udGFyLmd6CiAgICAgIC0gZHUgLWtzICRCSU4vdmljXyR7RFJPTkVfQlVJTERfTlVNQkVSfS50YXIuZ3ogfCBhd2sgJ3twcmludCAkMSAvIDEwMjR9JyB8IHsgcmVhZCB4OyBlY2hvICR4IE1COyB9CiAgICAgIC0gbWtkaXIgYnVuZGxlCiAgICAgIC0gY3AgJEJJTi92aWNfJHtEUk9ORV9CVUlMRF9OVU1CRVJ9LnRhci5neiBidW5kbGUKICAgICAgLSBtYWtlIHNpbmNlbWFyawogICAgd2hlbjoKICAgICAgcmVwbzogdm13YXJlL3ZpYwogICAgICBldmVudDogWyBwdXNoLCB0YWcgXQogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlcy8qLCByZWZzL3RhZ3MvKiBdCiAgICAgIHN0YXR1czogc3VjY2VzcwoKICBub3RpZnktc2xhY2s6CiAgICBpbWFnZTogcGx1Z2lucy9zbGFjawogICAgd2ViaG9vazogJHtTTEFDS19VUkx9CiAgICB1c2VybmFtZTogZHJvbmUKICAgIHRlbXBsYXRlOiA-CiAgICAgIGJ1aWxkIGh0dHBzOi8vY2kudmNuYS5pby92bXdhcmUvdmljL3t7IGJ1aWxkLm51bWJlciB9fSBmaW5pc2hlZCB3aXRoIGEge3sgYnVpbGQuc3RhdHVzIH19IHN0YXR1cywgZmluZCB0aGUgbG9ncyBoZXJlOiBodHRwczovL2NvbnNvbGUuY2xvdWQuZ29vZ2xlLmNvbS9tL2Nsb3Vkc3RvcmFnZS9iL3ZpYy1jaS1sb2dzL28vaW50ZWdyYXRpb25fbG9nc197eyBidWlsZC5udW1iZXIgfX1fe3sgYnVpbGQuY29tbWl0IH19LnppcD9hdXRodXNlcj0xCiAgICB3aGVuOgogICAgICByZXBvOiB2bXdhcmUvdmljCiAgICAgIGJyYW5jaDogWyBtYXN0ZXIsIHJlbGVhc2VzLyosIHJlZnMvdGFncy8qIF0KICAgICAgc3RhdHVzOiBmYWlsdXJlCgogIHB1Ymxpc2gtZ2NzLWJ1aWxkczoKICAgIGltYWdlOiBtYXBsYWluL2Ryb25lLWdjczpsYXRlc3QKICAgIHB1bGw6IHRydWUKICAgIHNvdXJjZTogYnVuZGxlCiAgICB0YXJnZXQ6IHZpYy1lbmdpbmUtYnVpbGRzCiAgICBhY2w6CiAgICAgIC0gYWxsVXNlcnM6UkVBREVSCiAgICBjYWNoZV9jb250cm9sOiBwdWJsaWMsbWF4LWFnZT0zNjAwCiAgICB3aGVuOgogICAgICByZXBvOiB2bXdhcmUvdmljCiAgICAgIGV2ZW50OiBbIHB1c2ggXQogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlcy8qIF0KICAgICAgc3RhdHVzOiBzdWNjZXNzCgogIHB1Ymxpc2gtZ2NzLXJlbGVhc2VzOgogICAgaW1hZ2U6IG1hcGxhaW4vZHJvbmUtZ2NzOmxhdGVzdAogICAgcHVsbDogdHJ1ZQogICAgc291cmNlOiBidW5kbGUKICAgIHRhcmdldDogdmljLWVuZ2luZS1yZWxlYXNlcwogICAgYWNsOgogICAgICAtIGFsbFVzZXJzOlJFQURFUgogICAgY2FjaGVfY29udHJvbDogcHVibGljLG1heC1hZ2U9MzYwMAogICAgd2hlbjoKICAgICAgcmVwbzogdm13YXJlL3ZpYwogICAgICBldmVudDogWyBwdXNoLCB0YWcgXQogICAgICBicmFuY2g6IFsgcmVmcy90YWdzLyogXQogICAgICBzdGF0dXM6IHN1Y2Nlc3MKCiAgdHJpZ2dlci1kb3duc3RyZWFtOgogICAgICBpbWFnZTogcGx1Z2lucy9kb3duc3RyZWFtCiAgICAgIHNlcnZlcjogaHR0cHM6Ly9jaS52Y25hLmlvCiAgICAgIHRva2VuOiAke0RST05FX1RPS0VOfQogICAgICBmb3JrOiB0cnVlCiAgICAgIHJlcG9zaXRvcmllczoKICAgICAgICAtIHZtd2FyZS92aWMtcHJvZHVjdAogICAgICB3aGVuOgogICAgICAgIHJlcG86IHZtd2FyZS92aWMKICAgICAgICBldmVudDogWyBwdXNoLCB0YWcgXQogICAgICAgIGJyYW5jaDogWyBtYXN0ZXIsIHJlbGVhc2VzLyosIHJlZnMvdGFncy8qIF0KICAgICAgICBzdGF0dXM6IHN1Y2Nlc3MKCiAgcmVwb3J0LWNvdmVyYWdlOgogICAgaW1hZ2U6IHBsdWdpbnMvY292ZXJhZ2UKICAgIHNlcnZlcjogaHR0cHM6Ly9jb3ZlcmFnZS52bXdhcmUucnVuCiAgICBwYXR0ZXJuOiAuY292ZXIvY292ZXIub3V0CiAgICB3aGVuOgogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlcy8qLCByZWZzL3RhZ3MvKiBdCiAgICAgIHJlcG86IHZtd2FyZS92aWMKICAgICAgc3RhdHVzOiBzdWNjZXNzCg.3277bm1IrlZL5qlnNadhNkitsKgofOsIqgOn_MX9ebc