eyJhbGciOiJIUzI1NiJ9.# After any change to this file you MUST re-sign and checkin the .drone.yml.sig
# When you are ready to submit a pull request, you must regenerate .drone.yml.sig for the vmware/vic repo:
# $ export DRONE_SERVER=https://ci.vcna.io
# $ export DRONE_TOKEN=<token>
# $ drone sign vmware/vic
# The secrets file is in our local git repo.  Ask mhagen for access.

---
workspace:
  base: /go
  path: src/github.com/vmware/vic

pipeline:
  clone:
    image: plugins/git
    tags: true
    # dont clone submodules
    recursive: false

  display-status:
    image: harbor.ci.drone.local/library/vic-integration-test:1.38
    pull: true
    environment:
      BIN: bin
      SHELL: /bin/bash
      COMMIT: ${DRONE_COMMIT}
    commands:
      - echo "Expecting ${DRONE_COMMIT}"
      - git log -5
      - git log -1 --pretty=oneline | grep "^${DRONE_COMMIT}" > /dev/null && echo 'Build matches' || (git log -1 --pretty=oneline | grep "Merge ${DRONE_COMMIT}" > /dev/null && echo 'Build is of a merge commit' || (echo 'Build does not match!' && exit 1))

  wait-for-build:
    image: harbor.ci.drone.local/library/vic-integration-test:1.38
    pull: true
    environment:
      BIN: bin
      GOPATH: /go
      SHELL: /bin/bash
      TEST_URL_ARRAY: ${TEST_URL_ARRAY}
      DRONE_SERVER: ${DRONE_SERVER}
      DRONE_TOKEN: ${DRONE_TOKEN}
    commands:
      - tests/wait_until_previous_builds_complete.sh

  vic-engine:
    image: harbor.ci.drone.local/library/vic-integration-test:1.38
    pull: true
    environment:
      BIN: bin
      GOPATH: /go
      SHELL: /bin/bash
      TEST_URL_ARRAY:  ${TEST_URL_ARRAY}
      TEST_USERNAME:  ${TEST_USERNAME}
      TEST_PASSWORD:  ${TEST_PASSWORD}
      REGISTRY_PASSWORD:  ${REGISTRY_PASSWORD}
      BUILD_NUMBER: ${DRONE_BUILD_NUMBER}
      COMMIT: ${DRONE_COMMIT}
    commands:
      - make mark
      - make all
      - make sincemark
      - make mark
      - echo `ls vendor/github.com/vmware/govmomi/vim25/methods`
      - echo `ls vendor/github.com/vmware/govmomi/vim25/types`
      - echo `ls vendor/github.com/docker/docker/vendor/github.com/opencontainers/runc/libcontainer/system`
      - export VIC_ESX_URL_ARRAY="`tests/get_test_url.sh`"
      - make test
      - make sincemark
    when:
      status:  success

  report-coverage:
     image: robertstettner/drone-codecov
     token: ${CODECOV_TOKEN}
     files:
       - .cover/cover.out
     when:
#       branch: [ master, releases/*, refs/tags/* ]
#       repo: vmware/vic
       status: success

  vic-integration-test-on-pr:
    image: harbor.ci.drone.local/library/vic-integration-test:1.38
    pull: true
    privileged: true
    environment:
      BIN: bin
      GOPATH: /go
      SHELL: /bin/bash
      LOG_TEMP_DIR: install-logs
      GITHUB_AUTOMATION_API_KEY:  ${GITHUB_AUTOMATION_API_KEY}
      DRONE_SERVER:  ${DRONE_SERVER}
      DRONE_TOKEN:  ${DRONE_TOKEN}
      DRONE_MACHINE:  ${DRONE_MACHINE}
      TEST_URL_ARRAY:  ${TEST_URL_ARRAY}
      TEST_USERNAME:  ${TEST_USERNAME}
      TEST_PASSWORD:  ${TEST_PASSWORD}
      REGISTRY_PASSWORD:  ${REGISTRY_PASSWORD}
      TEST_DATASTORE: ${TEST_DATASTORE}
      TEST_TIMEOUT: ${TEST_TIMEOUT}
      REPORTING_SERVER_URL: ${REPORTING_SERVER_URL}
      GOVC_INSECURE: true
      GOVC_USERNAME:  ${TEST_USERNAME}
      GOVC_PASSWORD:  ${TEST_PASSWORD}
      GOVC_DATASTORE: ${TEST_DATASTORE}
      GS_PROJECT_ID: ${GS_PROJECT_ID}
      GS_CLIENT_EMAIL: ${GS_CLIENT_EMAIL}
      GS_PRIVATE_KEY: ${GS_PRIVATE_KEY}
      DOMAIN: ${CI_DOMAIN}
      SYSLOG_SERVER: ${SYSLOG_SERVER}
      SYSLOG_USER: ${SYSLOG_USER}
      SYSLOG_PASSWD: ${SYSLOG_PASSWD}
    commands:
      - . ./tests/ci-env.sh # set CI env variable values
      - make mark
      - tests/integration-test.sh
      - make sincemark
    volumes:
      - /tmp
      - /home/vic:/ci
    when:
      status:  success

  vic-ui:
    image: harbor.ci.drone.local/library/vic-integration-test:1.38
    pull: true
    environment:
      BUILD_NUMBER: ${DRONE_BUILD_NUMBER}
      BIN: bin
      GS_PROJECT_ID: ${GS_PROJECT_ID}
      GS_CLIENT_EMAIL: ${GS_CLIENT_EMAIL}
      GS_PRIVATE_KEY: ${GS_PRIVATE_KEY}
    commands:
      - mkdir -p $BIN/ui
      - export LATEST_VIC_UI_BUILD="$(gsutil ls -l 'gs://vic-ui-builds' | grep -v TOTAL | grep vic_ | sort -k2 -r | (trap ' ' PIPE; head -1))"
      - export VIC_UI_URL=$(echo $LATEST_VIC_UI_BUILD | xargs | cut -d " " -f 3 | sed "s/gs:\/\//https:\/\/storage.googleapis.com\//")
      - wget -nv $VIC_UI_URL -P $BIN
      - tar -xvzf $BIN/vic_ui_*.tar.gz
      - ls -la ./$BIN && ./$BIN/ui/sync-vic-ui-version.sh -p bin/ 2>&1
      - rm $BIN/vic_ui_*.tar.gz
    when:
      status:  success
      branch: [ master ]

  vic-ui-release:
    image: harbor.ci.drone.local/library/vic-integration-test:1.38
    pull: true
    environment:
      BUILD_NUMBER: ${DRONE_BUILD_NUMBER}
      BIN: bin
      GS_PROJECT_ID: ${GS_PROJECT_ID}
      GS_CLIENT_EMAIL: ${GS_CLIENT_EMAIL}
      GS_PRIVATE_KEY: ${GS_PRIVATE_KEY}
    commands:
      - mkdir -p $BIN/ui
      - export LATEST_VIC_UI_RELEASE="$(gsutil ls -l 'gs://vic-ui-releases' | grep -v TOTAL | grep vic_ | sort -k2 -r | (trap ' ' PIPE; head -1))"
      - export VIC_UI_URL=$(echo $LATEST_VIC_UI_RELEASE | xargs | cut -d " " -f 3 | sed "s/gs:\/\//https:\/\/storage.googleapis.com\//")
      - wget -nv $VIC_UI_URL -P $BIN
      - tar -xvzf $BIN/vic_ui_*.tar.gz
      - ls -la ./$BIN && ./$BIN/ui/sync-vic-ui-version.sh -p bin/ 2>&1
      - rm $BIN/vic_ui_*.tar.gz
    when:
      status:  success
      branch: [ releases/*, refs/tags/* ]

  bundle:
    image: harbor.ci.drone.local/library/golang:1.8
    pull: true
    environment:
      BIN: bin
      BIN_TEMP_DIR: bin/vic
      GOPATH: /go
      SHELL: /bin/bash
    commands:
      - make mark
      - rm -rf $BIN_TEMP_DIR
      - mkdir -p $BIN_TEMP_DIR
      - mv $BIN/ui $BIN_TEMP_DIR
      - cp LICENSE $BIN_TEMP_DIR
      - cp doc/bundle/README $BIN_TEMP_DIR
      - cp $BIN/vic-machine* $BIN_TEMP_DIR
      - cp $BIN/vic-ui* $BIN_TEMP_DIR
      - cp $BIN/appliance.iso $BIN_TEMP_DIR
      - cp $BIN/bootstrap.iso $BIN_TEMP_DIR
      - tar czvf $BIN/vic_${DRONE_BUILD_NUMBER}.tar.gz -C $BIN vic
      - shasum -a 256 $BIN/vic_${DRONE_BUILD_NUMBER}.tar.gz
      - shasum -a 1 $BIN/vic_${DRONE_BUILD_NUMBER}.tar.gz
      - md5sum $BIN/vic_${DRONE_BUILD_NUMBER}.tar.gz
      - du -ks $BIN/vic_${DRONE_BUILD_NUMBER}.tar.gz | awk '{print $1 / 1024}' | { read x; echo $x MB; }
      - mkdir bundle
      - mkdir bundle-release
      - cp $BIN/vic_${DRONE_BUILD_NUMBER}.tar.gz bundle
      - cp $BIN/vic_${DRONE_BUILD_NUMBER}.tar.gz bundle-release/vic_`git describe --tags $(git rev-list --tags --max-count=1)`.tar.gz
      - make sincemark
    when:
      repo: vmware/vic
      event: [ push, tag ]
      branch: [ master, releases/*, refs/tags/* ]

  publish-gcs-builds-on-pass:
    image: maplain/drone-gcs:latest
    pull: true
    source: bundle
    target: vic-engine-builds
    acl:
      - allUsers:READER
    cache_control: public,max-age=3600
    when:
      repo: vmware/vic
      event: [ push ]
      branch: [ master, releases/* ]
      status: success

  publish-gcs-builds-on-fail:
    image: maplain/drone-gcs:latest
    pull: true
    source: bundle
    target: vic-engine-failed-builds
    acl:
      - allUsers:READER
    cache_control: public,max-age=3600
    when:
      repo: vmware/vic
      event: [ push ]
      branch: [ master, releases/* ]
      status: failure

  publish-gcs-releases:
    image: maplain/drone-gcs:latest
    pull: true
    source: bundle-release
    target: vic-engine-releases
    acl:
      - allUsers:READER
    cache_control: public,max-age=3600
    when:
      repo: vmware/vic
      event: [ push, tag ]
      branch: [ refs/tags/* ]
      status: success

  publish-vic-machine-server-dev:
    image: plugins/gcr
    repo: eminent-nation-87317/vic-machine-server
    dockerfile: cmd/vic-machine-server/Dockerfile
    tags:
      - dev
    json_key: >
      {
        "type": "service_account",
        "project_id": "${GS_PROJECT_ID}",
        "private_key_id": "${GS_PRIVATE_KEY_ID}",
        "private_key": "${GS_PRIVATE_KEY}",
        "client_email": "${GS_CLIENT_EMAIL}",
        "client_id": "${GS_PROJECT_ID}",
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://accounts.google.com/o/oauth2/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": ""
      }
    when:
      repo: vmware/vic
      event: [ push ]
      branch: [ master ]
      status: success

  publish-vic-machine-server-releases:
    image: plugins/gcr
    repo: eminent-nation-87317/vic-machine-server
    dockerfile: cmd/vic-machine-server/Dockerfile
    tags:
      - latest
    json_key: >
      {
        "type": "service_account",
        "project_id": "${GS_PROJECT_ID}",
        "private_key_id": "${GS_PRIVATE_KEY_ID}",
        "private_key": "${GS_PRIVATE_KEY}",
        "client_email": "${GS_CLIENT_EMAIL}",
        "client_id": "${GS_PROJECT_ID}",
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://accounts.google.com/o/oauth2/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": ""
      }
    when:
      repo: vmware/vic
      event: [ push, tag ]
      branch: [ refs/tags/*, releases/* ]
      status: success

  trigger-downstream:
    image: plugins/downstream
    server: https://ci.vcna.io
    token: ${DRONE_TOKEN}
    fork: true
    repositories:
      - vmware/vic-product
    when:
      repo: vmware/vic
      event: [ push, tag ]
      branch: [ master, releases/*, refs/tags/* ]
      status: success

  notify-slack-on-fail:
    image: plugins/slack
    webhook: ${SLACK_URL}
    username: drone
    template: >
      build https://ci.vcna.io/vmware/vic/{{ build.number }} finished with a {{ build.status }} status, find the logs here: https://console.cloud.google.com/m/cloudstorage/b/vic-ci-logs/o/integration_logs_{{ build.number }}_{{ build.commit }}.zip?authuser=1
    when:
      repo: vmware/vic
      branch: [ master, releases/*, refs/tags/* ]
      status: failure

  notify-slack-on-pass:
    image: plugins/slack
    webhook: ${SLACK_URL}
    username: drone
    template: >
      build https://ci.vcna.io/vmware/vic/{{ build.number }} finished with a {{ build.status }} status, find the build here: https://storage.googleapis.com/vic-engine-builds/vic_{{ build.number }}.tar.gz
    when:
      repo: vmware/vic
      branch: [ master, releases/* ]
      status: success

  notify-slack-on-successful-tag:
    image: plugins/slack
    webhook: ${SLACK_URL}
    username: drone
    template: >
      The latest version of VIC engine has been released, find the build here: https://console.cloud.google.com/storage/browser/vic-engine-releases
    when:
      repo: vmware/vic
      branch: [ refs/tags/* ]
      status: success
.B4PDIDnvrcvnTHPA88xCDDYrdW7CBHIEmMRFTsiYhik