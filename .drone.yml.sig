eyJhbGciOiJIUzI1NiJ9.IyBBZnRlciBhbnkgY2hhbmdlIHRvIHRoaXMgZmlsZSB5b3UgTVVTVCByZS1zaWduIGFuZCBjaGVja2luIHRoZSAuZHJvbmUueW1sLnNpZwojIFdoZW4geW91IGFyZSByZWFkeSB0byBzdWJtaXQgYSBwdWxsIHJlcXVlc3QsIHlvdSBtdXN0IHJlZ2VuZXJhdGUgLmRyb25lLnltbC5zaWcgZm9yIHRoZSB2bXdhcmUvdmljIHJlcG86CiMgJCBleHBvcnQgRFJPTkVfU0VSVkVSPWh0dHBzOi8vY2kudmNuYS5pbwojICQgZXhwb3J0IERST05FX1RPS0VOPTx0b2tlbj4KIyAkIGRyb25lIHNpZ24gdm13YXJlL3ZpYwojIFRoZSBzZWNyZXRzIGZpbGUgaXMgaW4gb3VyIGxvY2FsIGdpdCByZXBvLiAgQXNrIG1oYWdlbiBmb3IgYWNjZXNzLgoKLS0tCndvcmtzcGFjZToKICBiYXNlOiAvZ28KICBwYXRoOiBzcmMvZ2l0aHViLmNvbS92bXdhcmUvdmljCgpwaXBlbGluZToKICBjbG9uZToKICAgIGltYWdlOiBwbHVnaW5zL2dpdAogICAgdGFnczogdHJ1ZQogICAgIyBkb250IGNsb25lIHN1Ym1vZHVsZXMKICAgIHJlY3Vyc2l2ZTogZmFsc2UKCiAgd2FpdC1mb3ItYnVpbGQ6CiAgICBpbWFnZTogJHtURVNUX0JVSUxEX0lNQUdFPWdjci5pby9lbWluZW50LW5hdGlvbi04NzMxNy92aWMtaW50ZWdyYXRpb24tdGVzdDoxLjMwfQogICAgcHVsbDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIEJJTjogYmluCiAgICAgIEdPUEFUSDogL2dvCiAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgICAgVEVTVF9VUkxfQVJSQVk6ICR7VEVTVF9VUkxfQVJSQVl9CiAgICAgIERST05FX1NFUlZFUjogJHtEUk9ORV9TRVJWRVJ9CiAgICAgIERST05FX1RPS0VOOiAke0RST05FX1RPS0VOfQogICAgY29tbWFuZHM6CiAgICAgIC0gdGVzdHMvd2FpdF91bnRpbF9wcmV2aW91c19idWlsZHNfY29tcGxldGUuc2gKCiAgdmljLWVuZ2luZToKICAgIGltYWdlOiAke1RFU1RfQlVJTERfSU1BR0U9Z2NyLmlvL2VtaW5lbnQtbmF0aW9uLTg3MzE3L3ZpYy1pbnRlZ3JhdGlvbi10ZXN0OjEuMzB9CiAgICBwdWxsOiB0cnVlCiAgICBlbnZpcm9ubWVudDoKICAgICAgQklOOiBiaW4KICAgICAgR09QQVRIOiAvZ28KICAgICAgU0hFTEw6IC9iaW4vYmFzaAogICAgICBURVNUX1VSTF9BUlJBWTogICR7VEVTVF9VUkxfQVJSQVl9CiAgICAgIFRFU1RfVVNFUk5BTUU6ICAke1RFU1RfVVNFUk5BTUV9CiAgICAgIFRFU1RfUEFTU1dPUkQ6ICAke1RFU1RfUEFTU1dPUkR9CiAgICAgIEJVSUxEX05VTUJFUjogJHtEUk9ORV9CVUlMRF9OVU1CRVJ9CiAgICAgIENPTU1JVDogJHtEUk9ORV9DT01NSVR9CiAgICBjb21tYW5kczoKICAgICAgLSBtYWtlIG1hcmsKICAgICAgLSBtYWtlIC1qMyBhbGwKICAgICAgLSBtYWtlIHNpbmNlbWFyawogICAgICAtIG1ha2UgbWFyawogICAgICAtIGVjaG8gYGxzIHZlbmRvci9naXRodWIuY29tL3Ztd2FyZS9nb3Ztb21pL3ZpbTI1L21ldGhvZHNgCiAgICAgIC0gZWNobyBgbHMgdmVuZG9yL2dpdGh1Yi5jb20vdm13YXJlL2dvdm1vbWkvdmltMjUvdHlwZXNgCiAgICAgIC0gZWNobyBgbHMgdmVuZG9yL2dpdGh1Yi5jb20vZG9ja2VyL2RvY2tlci92ZW5kb3IvZ2l0aHViLmNvbS9vcGVuY29udGFpbmVycy9ydW5jL2xpYmNvbnRhaW5lci9zeXN0ZW1gCiAgICAgIC0gZXhwb3J0IFZJQ19FU1hfVVJMX0FSUkFZPSJgdGVzdHMvZ2V0X3Rlc3RfdXJsLnNoYCIKICAgICAgLSBtYWtlIC1qMyB0ZXN0CiAgICAgIC0gbWFrZSBzaW5jZW1hcmsKICAgIHdoZW46CiAgICAgIHN0YXR1czogIHN1Y2Nlc3MKCiAgdmljLWludGVncmF0aW9uLXRlc3Qtb24tcHI6CiAgICBpbWFnZTogJHtURVNUX0JVSUxEX0lNQUdFPWdjci5pby9lbWluZW50LW5hdGlvbi04NzMxNy92aWMtaW50ZWdyYXRpb24tdGVzdDoxLjMwfQogICAgcHVsbDogdHJ1ZQogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIEJJTjogYmluCiAgICAgIEdPUEFUSDogL2dvCiAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgICAgTE9HX1RFTVBfRElSOiBpbnN0YWxsLWxvZ3MKICAgICAgR0lUSFVCX0FVVE9NQVRJT05fQVBJX0tFWTogICR7R0lUSFVCX0FVVE9NQVRJT05fQVBJX0tFWX0KICAgICAgRFJPTkVfU0VSVkVSOiAgJHtEUk9ORV9TRVJWRVJ9CiAgICAgIERST05FX1RPS0VOOiAgJHtEUk9ORV9UT0tFTn0KICAgICAgVEVTVF9VUkxfQVJSQVk6ICAke1RFU1RfVVJMX0FSUkFZfQogICAgICBURVNUX1VTRVJOQU1FOiAgJHtURVNUX1VTRVJOQU1FfQogICAgICBURVNUX1BBU1NXT1JEOiAgJHtURVNUX1BBU1NXT1JEfQogICAgICBURVNUX0RBVEFTVE9SRTogJHtURVNUX0RBVEFTVE9SRX0KICAgICAgVEVTVF9USU1FT1VUOiAke1RFU1RfVElNRU9VVH0KICAgICAgUkVQT1JUSU5HX1NFUlZFUl9VUkw6ICR7UkVQT1JUSU5HX1NFUlZFUl9VUkx9CiAgICAgIEdPVkNfSU5TRUNVUkU6IHRydWUKICAgICAgR09WQ19VU0VSTkFNRTogICR7VEVTVF9VU0VSTkFNRX0KICAgICAgR09WQ19QQVNTV09SRDogICR7VEVTVF9QQVNTV09SRH0KICAgICAgR09WQ19EQVRBU1RPUkU6ICR7VEVTVF9EQVRBU1RPUkV9CiAgICAgIEdTX1BST0pFQ1RfSUQ6ICR7R1NfUFJPSkVDVF9JRH0KICAgICAgR1NfQ0xJRU5UX0VNQUlMOiAke0dTX0NMSUVOVF9FTUFJTH0KICAgICAgR1NfUFJJVkFURV9LRVk6ICR7R1NfUFJJVkFURV9LRVl9CiAgICAgIERPTUFJTjogJHtDSV9ET01BSU59CiAgICBjb21tYW5kczoKICAgICAgLSBtYWtlIG1hcmsKICAgICAgLSB0ZXN0cy9pbnRlZ3JhdGlvbi10ZXN0LnNoCiAgICAgIC0gbWFrZSBzaW5jZW1hcmsKICAgIHdoZW46CiAgICAgIHN0YXR1czogIHN1Y2Nlc3MKCiAgdmljLXVpOgogICAgaW1hZ2U6ICR7VEVTVF9CVUlMRF9JTUFHRT1nY3IuaW8vZW1pbmVudC1uYXRpb24tODczMTcvdmljLWludGVncmF0aW9uLXRlc3Q6MS4zMH0KICAgIHB1bGw6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICBCSU46IGJpbgogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBtYXJrCiAgICAgIC0gbWFrZSB2aWMtdWktcGx1Z2lucwogICAgICAtIG1ha2Ugc2luY2VtYXJrCiAgICB3aGVuOgogICAgICBzdGF0dXM6ICBzdWNjZXNzCgogIGJ1bmRsZToKICAgIGltYWdlOiBnb2xhbmc6MS44CiAgICBwdWxsOiB0cnVlCiAgICBlbnZpcm9ubWVudDoKICAgICAgQklOOiBiaW4KICAgICAgQklOX1RFTVBfRElSOiBiaW4vdmljCiAgICAgIEdPUEFUSDogL2dvCiAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgIGNvbW1hbmRzOgogICAgICAtIG1ha2UgbWFyawogICAgICAtIHJtIC1yZiAkQklOX1RFTVBfRElSCiAgICAgIC0gbWtkaXIgLXAgJEJJTl9URU1QX0RJUi91aQogICAgICAtIGNwIC1yZiB1aS9pbnN0YWxsZXIvKiAkQklOX1RFTVBfRElSL3VpCiAgICAgIC0gY3AgTElDRU5TRSAkQklOX1RFTVBfRElSCiAgICAgIC0gY3AgZG9jL2J1bmRsZS9SRUFETUUgJEJJTl9URU1QX0RJUgogICAgICAtIGNwICRCSU4vdmljLW1hY2hpbmUqICRCSU5fVEVNUF9ESVIKICAgICAgLSBjcCAkQklOL3ZpYy11aSogJEJJTl9URU1QX0RJUgogICAgICAtIGNwICRCSU4vYXBwbGlhbmNlLmlzbyAkQklOX1RFTVBfRElSCiAgICAgIC0gY3AgJEJJTi9ib290c3RyYXAuaXNvICRCSU5fVEVNUF9ESVIKICAgICAgLSB0YXIgY3p2ZiAkQklOL3ZpY18kJEJVSUxEX05VTUJFUi50YXIuZ3ogLUMgJEJJTiB2aWMKICAgICAgLSBzaGFzdW0gLWEgMjU2ICRCSU4vdmljXyQkQlVJTERfTlVNQkVSLnRhci5negogICAgICAtIHNoYXN1bSAtYSAxICRCSU4vdmljXyQkQlVJTERfTlVNQkVSLnRhci5negogICAgICAtIG1kNXN1bSAkQklOL3ZpY18kJEJVSUxEX05VTUJFUi50YXIuZ3oKICAgICAgLSBkdSAta3MgJEJJTi92aWNfJCRCVUlMRF9OVU1CRVIudGFyLmd6IHwgYXdrICd7cHJpbnQgJDEgLyAxMDI0fScgfCB7IHJlYWQgeDsgZWNobyAkeCBNQjsgfQogICAgICAtIG1rZGlyIGJ1bmRsZQogICAgICAtIGNwICRCSU4vdmljXyQkQlVJTERfTlVNQkVSLnRhci5neiBidW5kbGUKICAgICAgLSBtYWtlIHNpbmNlbWFyawogICAgd2hlbjoKICAgICAgcmVwbzogdm13YXJlL3ZpYwogICAgICBldmVudDogWyBwdXNoLCB0YWcgXQogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlcy8qLCByZWZzL3RhZ3MvKiBdCiAgICAgIHN0YXR1czogc3VjY2VzcwoKICBub3RpZnktc2xhY2s6CiAgICBpbWFnZTogcGx1Z2lucy9zbGFjawogICAgd2ViaG9vazogJHtTTEFDS19VUkx9CiAgICB1c2VybmFtZTogZHJvbmUKICAgIHRlbXBsYXRlOiA-CiAgICAgIGJ1aWxkIGh0dHBzOi8vY2kudmNuYS5pby92bXdhcmUvdmljL3t7IGJ1aWxkLm51bWJlciB9fSBmaW5pc2hlZCB3aXRoIGEge3sgYnVpbGQuc3RhdHVzIH19IHN0YXR1cywgZmluZCB0aGUgbG9ncyBoZXJlOiBodHRwczovL2NvbnNvbGUuY2xvdWQuZ29vZ2xlLmNvbS9tL2Nsb3Vkc3RvcmFnZS9iL3ZpYy1jaS1sb2dzL28vaW50ZWdyYXRpb25fbG9nc197eyBidWlsZC5udW1iZXIgfX1fe3sgYnVpbGQuY29tbWl0IH19LnppcD9hdXRodXNlcj0xCiAgICB3aGVuOgogICAgICByZXBvOiB2bXdhcmUvdmljCiAgICAgIGJyYW5jaDogWyBtYXN0ZXIsIHJlbGVhc2VzLyosIHJlZnMvdGFncy8qIF0KICAgICAgc3RhdHVzOiBmYWlsdXJlCgogIHB1Ymxpc2gtZ2NzLWJ1aWxkczoKICAgIGltYWdlOiBtYXBsYWluL2Ryb25lLWdjczpsYXRlc3QKICAgIHB1bGw6IHRydWUKICAgIHNvdXJjZTogYnVuZGxlCiAgICB0YXJnZXQ6IHZpYy1lbmdpbmUtYnVpbGRzCiAgICBhY2w6CiAgICAgIC0gYWxsVXNlcnM6UkVBREVSCiAgICBjYWNoZV9jb250cm9sOiBwdWJsaWMsbWF4LWFnZT0zNjAwCiAgICB3aGVuOgogICAgICByZXBvOiB2bXdhcmUvdmljCiAgICAgIGV2ZW50OiBbIHB1c2ggXQogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlcy8qIF0KICAgICAgc3RhdHVzOiBzdWNjZXNzCgogIHB1Ymxpc2gtZ2NzLXJlbGVhc2VzOgogICAgaW1hZ2U6IG1hcGxhaW4vZHJvbmUtZ2NzOmxhdGVzdAogICAgcHVsbDogdHJ1ZQogICAgc291cmNlOiBidW5kbGUKICAgIHRhcmdldDogdmljLWVuZ2luZS1yZWxlYXNlcwogICAgYWNsOgogICAgICAtIGFsbFVzZXJzOlJFQURFUgogICAgY2FjaGVfY29udHJvbDogcHVibGljLG1heC1hZ2U9MzYwMAogICAgd2hlbjoKICAgICAgcmVwbzogdm13YXJlL3ZpYwogICAgICBldmVudDogWyBwdXNoLCB0YWcgXQogICAgICBicmFuY2g6IFsgcmVmcy90YWdzLyogXQogICAgICBzdGF0dXM6IHN1Y2Nlc3MKCiAgcmVwb3J0LWNvdmVyYWdlOgogICAgaW1hZ2U6IHBsdWdpbnMvY292ZXJhZ2UKICAgIHNlcnZlcjogaHR0cHM6Ly9jb3ZlcmFnZS52bXdhcmUucnVuCiAgICBwYXR0ZXJuOiAuY292ZXIvY292ZXIub3V0CiAgICB3aGVuOgogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlcy8qLCByZWZzL3RhZ3MvKiwgdGVzdC1jb3ZlcmFnZS1yZXBvcnRpbmcgXQogICAgICByZXBvOiB2bXdhcmUvdmljCiAgICAgIHN0YXR1czogc3VjY2VzcwogICAgICBldmVudDogWyBwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdCBdCg.kDVQkv9Q-fHichxWappuTAzIosX1HjWy5KoMofoQR9g